
f0discovery-drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000079c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  0800085c  0800085c  0001085c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000868  08000868  00010870  2**0
                  CONTENTS
  4 .ARM          00000000  08000868  08000868  00010870  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000868  08000870  00010870  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000868  08000868  00010868  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800086c  0800086c  0001086c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010870  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000870  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000870  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00010870  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001636  00000000  00000000  00010898  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000003ec  00000000  00000000  00011ece  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000130  00000000  00000000  000122c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000000f8  00000000  00000000  000123f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00001e01  00000000  00000000  000124e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000010e6  00000000  00000000  000142e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000081e0  00000000  00000000  000153cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0001d5af  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000360  00000000  00000000  0001d62c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000000 	.word	0x20000000
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08000844 	.word	0x08000844

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000004 	.word	0x20000004
 8000104:	08000844 	.word	0x08000844

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <SPI2_GPIOInits>:
 * PB12 --> SPI2_NSS
 * ALT function mode: 0
 */

void SPI2_GPIOInits(void)
{
 8000118:	b580      	push	{r7, lr}
 800011a:	b084      	sub	sp, #16
 800011c:	af00      	add	r7, sp, #0
	GPIO_Handle_t SPIPins;

	SPIPins.pGPIOx = GPIOB;
 800011e:	1d3b      	adds	r3, r7, #4
 8000120:	4a11      	ldr	r2, [pc, #68]	; (8000168 <SPI2_GPIOInits+0x50>)
 8000122:	601a      	str	r2, [r3, #0]
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000124:	1d3b      	adds	r3, r7, #4
 8000126:	2202      	movs	r2, #2
 8000128:	715a      	strb	r2, [r3, #5]
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 0;
 800012a:	1d3b      	adds	r3, r7, #4
 800012c:	2200      	movs	r2, #0
 800012e:	725a      	strb	r2, [r3, #9]
	SPIPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000130:	1d3b      	adds	r3, r7, #4
 8000132:	2200      	movs	r2, #0
 8000134:	721a      	strb	r2, [r3, #8]
	SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPPD;
 8000136:	1d3b      	adds	r3, r7, #4
 8000138:	2200      	movs	r2, #0
 800013a:	71da      	strb	r2, [r3, #7]
	SPIPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800013c:	1d3b      	adds	r3, r7, #4
 800013e:	2202      	movs	r2, #2
 8000140:	719a      	strb	r2, [r3, #6]

	/* SCLK */
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 8000142:	1d3b      	adds	r3, r7, #4
 8000144:	220d      	movs	r2, #13
 8000146:	711a      	strb	r2, [r3, #4]
	GPIO_Init(&SPIPins);
 8000148:	1d3b      	adds	r3, r7, #4
 800014a:	0018      	movs	r0, r3
 800014c:	f000 f8e2 	bl	8000314 <GPIO_Init>

	/* MOSI */
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_15;
 8000150:	1d3b      	adds	r3, r7, #4
 8000152:	220f      	movs	r2, #15
 8000154:	711a      	strb	r2, [r3, #4]
	GPIO_Init(&SPIPins);
 8000156:	1d3b      	adds	r3, r7, #4
 8000158:	0018      	movs	r0, r3
 800015a:	f000 f8db 	bl	8000314 <GPIO_Init>
	//GPIO_Init(&SPIPins);

	/* NSS */
	//SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
	//GPIO_Init(&SPIPins);
}
 800015e:	46c0      	nop			; (mov r8, r8)
 8000160:	46bd      	mov	sp, r7
 8000162:	b004      	add	sp, #16
 8000164:	bd80      	pop	{r7, pc}
 8000166:	46c0      	nop			; (mov r8, r8)
 8000168:	48000400 	.word	0x48000400

0800016c <SPI2_Inits>:

void SPI2_Inits(void)
{
 800016c:	b580      	push	{r7, lr}
 800016e:	b084      	sub	sp, #16
 8000170:	af00      	add	r7, sp, #0
	SPI_Handle_t SPI2Handle;

	SPI2Handle.pSPIx = SPI2;
 8000172:	1d3b      	adds	r3, r7, #4
 8000174:	4a0f      	ldr	r2, [pc, #60]	; (80001b4 <SPI2_Inits+0x48>)
 8000176:	601a      	str	r2, [r3, #0]
	SPI2Handle.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;
 8000178:	1d3b      	adds	r3, r7, #4
 800017a:	2201      	movs	r2, #1
 800017c:	715a      	strb	r2, [r3, #5]
	SPI2Handle.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 800017e:	1d3b      	adds	r3, r7, #4
 8000180:	2201      	movs	r2, #1
 8000182:	711a      	strb	r2, [r3, #4]
	SPI2Handle.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV2;
 8000184:	1d3b      	adds	r3, r7, #4
 8000186:	2200      	movs	r2, #0
 8000188:	719a      	strb	r2, [r3, #6]
	SPI2Handle.SPIConfig.SPI_DFF = SPI_DFF_8BITS;
 800018a:	1d3b      	adds	r3, r7, #4
 800018c:	2200      	movs	r2, #0
 800018e:	71da      	strb	r2, [r3, #7]
	SPI2Handle.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;
 8000190:	1d3b      	adds	r3, r7, #4
 8000192:	2200      	movs	r2, #0
 8000194:	721a      	strb	r2, [r3, #8]
	SPI2Handle.SPIConfig.SPI_CPHA = SPI_CPHA_LOW;
 8000196:	1d3b      	adds	r3, r7, #4
 8000198:	2200      	movs	r2, #0
 800019a:	725a      	strb	r2, [r3, #9]
	SPI2Handle.SPIConfig.SPI_SSM = SPI_SSM_EN; /* software slave management is enabled*/
 800019c:	1d3b      	adds	r3, r7, #4
 800019e:	2201      	movs	r2, #1
 80001a0:	729a      	strb	r2, [r3, #10]

	SPI_Init(&SPI2Handle);
 80001a2:	1d3b      	adds	r3, r7, #4
 80001a4:	0018      	movs	r0, r3
 80001a6:	f000 fa73 	bl	8000690 <SPI_Init>
}
 80001aa:	46c0      	nop			; (mov r8, r8)
 80001ac:	46bd      	mov	sp, r7
 80001ae:	b004      	add	sp, #16
 80001b0:	bd80      	pop	{r7, pc}
 80001b2:	46c0      	nop			; (mov r8, r8)
 80001b4:	40003800 	.word	0x40003800

080001b8 <main>:

int main(void)
{
 80001b8:	b590      	push	{r4, r7, lr}
 80001ba:	b085      	sub	sp, #20
 80001bc:	af00      	add	r7, sp, #0
	char user_data[] = "Hello world";
 80001be:	1d3b      	adds	r3, r7, #4
 80001c0:	4a0b      	ldr	r2, [pc, #44]	; (80001f0 <main+0x38>)
 80001c2:	ca13      	ldmia	r2!, {r0, r1, r4}
 80001c4:	c313      	stmia	r3!, {r0, r1, r4}

	/*This function is used to initialize the GPIO pins to behave as SPI2 pins*/
	SPI2_GPIOInits();
 80001c6:	f7ff ffa7 	bl	8000118 <SPI2_GPIOInits>

	SPI2_Inits();
 80001ca:	f7ff ffcf 	bl	800016c <SPI2_Inits>

	/* Enable the SPI2 peripheral */
	SPI_PeripheralControl(SPI2, ENABLE);
 80001ce:	4b09      	ldr	r3, [pc, #36]	; (80001f4 <main+0x3c>)
 80001d0:	2101      	movs	r1, #1
 80001d2:	0018      	movs	r0, r3
 80001d4:	f000 faf5 	bl	80007c2 <SPI_PeripheralControl>

	SPI_SendData(SPI2, (uint8_t*)user_data, strlen(user_data));
 80001d8:	1d3b      	adds	r3, r7, #4
 80001da:	0018      	movs	r0, r3
 80001dc:	f7ff ff94 	bl	8000108 <strlen>
 80001e0:	0002      	movs	r2, r0
 80001e2:	1d3b      	adds	r3, r7, #4
 80001e4:	4803      	ldr	r0, [pc, #12]	; (80001f4 <main+0x3c>)
 80001e6:	0019      	movs	r1, r3
 80001e8:	f000 fab5 	bl	8000756 <SPI_SendData>

	while(1);
 80001ec:	e7fe      	b.n	80001ec <main+0x34>
 80001ee:	46c0      	nop			; (mov r8, r8)
 80001f0:	0800085c 	.word	0x0800085c
 80001f4:	40003800 	.word	0x40003800

080001f8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80001f8:	480d      	ldr	r0, [pc, #52]	; (8000230 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80001fa:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80001fc:	e000      	b.n	8000200 <Reset_Handler+0x8>
 80001fe:	bf00      	nop

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000200:	480c      	ldr	r0, [pc, #48]	; (8000234 <LoopForever+0x6>)
  ldr r1, =_edata
 8000202:	490d      	ldr	r1, [pc, #52]	; (8000238 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000204:	4a0d      	ldr	r2, [pc, #52]	; (800023c <LoopForever+0xe>)
  movs r3, #0
 8000206:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000208:	e002      	b.n	8000210 <LoopCopyDataInit>

0800020a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800020a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800020c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800020e:	3304      	adds	r3, #4

08000210 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000210:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000212:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000214:	d3f9      	bcc.n	800020a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000216:	4a0a      	ldr	r2, [pc, #40]	; (8000240 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000218:	4c0a      	ldr	r4, [pc, #40]	; (8000244 <LoopForever+0x16>)
  movs r3, #0
 800021a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800021c:	e001      	b.n	8000222 <LoopFillZerobss>

0800021e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800021e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000220:	3204      	adds	r2, #4

08000222 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000222:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000224:	d3fb      	bcc.n	800021e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000226:	f000 fae9 	bl	80007fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800022a:	f7ff ffc5 	bl	80001b8 <main>

0800022e <LoopForever>:

LoopForever:
    b LoopForever
 800022e:	e7fe      	b.n	800022e <LoopForever>
  ldr   r0, =_estack
 8000230:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000234:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000238:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800023c:	08000870 	.word	0x08000870
  ldr r2, =_sbss
 8000240:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000244:	2000001c 	.word	0x2000001c

08000248 <ADC_COMP_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000248:	e7fe      	b.n	8000248 <ADC_COMP_IRQHandler>
	...

0800024c <GPIO_PeriClockControl>:
 * @return 			- none
 *
 * @Note			- none
 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 800024c:	b580      	push	{r7, lr}
 800024e:	b082      	sub	sp, #8
 8000250:	af00      	add	r7, sp, #0
 8000252:	6078      	str	r0, [r7, #4]
 8000254:	000a      	movs	r2, r1
 8000256:	1cfb      	adds	r3, r7, #3
 8000258:	701a      	strb	r2, [r3, #0]
	if(EnorDi == ENABLE)
 800025a:	1cfb      	adds	r3, r7, #3
 800025c:	781b      	ldrb	r3, [r3, #0]
 800025e:	2b01      	cmp	r3, #1
 8000260:	d147      	bne.n	80002f2 <GPIO_PeriClockControl+0xa6>
	{
		if(pGPIOx == GPIOA)
 8000262:	687a      	ldr	r2, [r7, #4]
 8000264:	2390      	movs	r3, #144	; 0x90
 8000266:	05db      	lsls	r3, r3, #23
 8000268:	429a      	cmp	r2, r3
 800026a:	d107      	bne.n	800027c <GPIO_PeriClockControl+0x30>
		{
			GPIOA_PCLOCK_ENABLE();
 800026c:	4b23      	ldr	r3, [pc, #140]	; (80002fc <GPIO_PeriClockControl+0xb0>)
 800026e:	695a      	ldr	r2, [r3, #20]
 8000270:	4b22      	ldr	r3, [pc, #136]	; (80002fc <GPIO_PeriClockControl+0xb0>)
 8000272:	2180      	movs	r1, #128	; 0x80
 8000274:	0289      	lsls	r1, r1, #10
 8000276:	430a      	orrs	r2, r1
 8000278:	615a      	str	r2, [r3, #20]
	}
	else
	{
		// use macros to disable as in above code
	}
}
 800027a:	e03a      	b.n	80002f2 <GPIO_PeriClockControl+0xa6>
		else if(pGPIOx == GPIOB)
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	4a20      	ldr	r2, [pc, #128]	; (8000300 <GPIO_PeriClockControl+0xb4>)
 8000280:	4293      	cmp	r3, r2
 8000282:	d107      	bne.n	8000294 <GPIO_PeriClockControl+0x48>
			GPIOB_PCLOCK_ENABLE();
 8000284:	4b1d      	ldr	r3, [pc, #116]	; (80002fc <GPIO_PeriClockControl+0xb0>)
 8000286:	695a      	ldr	r2, [r3, #20]
 8000288:	4b1c      	ldr	r3, [pc, #112]	; (80002fc <GPIO_PeriClockControl+0xb0>)
 800028a:	2180      	movs	r1, #128	; 0x80
 800028c:	02c9      	lsls	r1, r1, #11
 800028e:	430a      	orrs	r2, r1
 8000290:	615a      	str	r2, [r3, #20]
}
 8000292:	e02e      	b.n	80002f2 <GPIO_PeriClockControl+0xa6>
		else if(pGPIOx == GPIOC)
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	4a1b      	ldr	r2, [pc, #108]	; (8000304 <GPIO_PeriClockControl+0xb8>)
 8000298:	4293      	cmp	r3, r2
 800029a:	d107      	bne.n	80002ac <GPIO_PeriClockControl+0x60>
			GPIOC_PCLOCK_ENABLE();
 800029c:	4b17      	ldr	r3, [pc, #92]	; (80002fc <GPIO_PeriClockControl+0xb0>)
 800029e:	695a      	ldr	r2, [r3, #20]
 80002a0:	4b16      	ldr	r3, [pc, #88]	; (80002fc <GPIO_PeriClockControl+0xb0>)
 80002a2:	2180      	movs	r1, #128	; 0x80
 80002a4:	0309      	lsls	r1, r1, #12
 80002a6:	430a      	orrs	r2, r1
 80002a8:	615a      	str	r2, [r3, #20]
}
 80002aa:	e022      	b.n	80002f2 <GPIO_PeriClockControl+0xa6>
		else if(pGPIOx == GPIOD)
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	4a16      	ldr	r2, [pc, #88]	; (8000308 <GPIO_PeriClockControl+0xbc>)
 80002b0:	4293      	cmp	r3, r2
 80002b2:	d107      	bne.n	80002c4 <GPIO_PeriClockControl+0x78>
			GPIOD_PCLOCK_ENABLE();
 80002b4:	4b11      	ldr	r3, [pc, #68]	; (80002fc <GPIO_PeriClockControl+0xb0>)
 80002b6:	695a      	ldr	r2, [r3, #20]
 80002b8:	4b10      	ldr	r3, [pc, #64]	; (80002fc <GPIO_PeriClockControl+0xb0>)
 80002ba:	2180      	movs	r1, #128	; 0x80
 80002bc:	0349      	lsls	r1, r1, #13
 80002be:	430a      	orrs	r2, r1
 80002c0:	615a      	str	r2, [r3, #20]
}
 80002c2:	e016      	b.n	80002f2 <GPIO_PeriClockControl+0xa6>
		else if(pGPIOx == GPIOE)
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	4a11      	ldr	r2, [pc, #68]	; (800030c <GPIO_PeriClockControl+0xc0>)
 80002c8:	4293      	cmp	r3, r2
 80002ca:	d107      	bne.n	80002dc <GPIO_PeriClockControl+0x90>
			GPIOE_PCLOCK_ENABLE();
 80002cc:	4b0b      	ldr	r3, [pc, #44]	; (80002fc <GPIO_PeriClockControl+0xb0>)
 80002ce:	695a      	ldr	r2, [r3, #20]
 80002d0:	4b0a      	ldr	r3, [pc, #40]	; (80002fc <GPIO_PeriClockControl+0xb0>)
 80002d2:	2180      	movs	r1, #128	; 0x80
 80002d4:	0389      	lsls	r1, r1, #14
 80002d6:	430a      	orrs	r2, r1
 80002d8:	615a      	str	r2, [r3, #20]
}
 80002da:	e00a      	b.n	80002f2 <GPIO_PeriClockControl+0xa6>
		else if(pGPIOx == GPIOF)
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	4a0c      	ldr	r2, [pc, #48]	; (8000310 <GPIO_PeriClockControl+0xc4>)
 80002e0:	4293      	cmp	r3, r2
 80002e2:	d106      	bne.n	80002f2 <GPIO_PeriClockControl+0xa6>
			GPIOF_PCLOCK_ENABLE();
 80002e4:	4b05      	ldr	r3, [pc, #20]	; (80002fc <GPIO_PeriClockControl+0xb0>)
 80002e6:	695a      	ldr	r2, [r3, #20]
 80002e8:	4b04      	ldr	r3, [pc, #16]	; (80002fc <GPIO_PeriClockControl+0xb0>)
 80002ea:	2180      	movs	r1, #128	; 0x80
 80002ec:	03c9      	lsls	r1, r1, #15
 80002ee:	430a      	orrs	r2, r1
 80002f0:	615a      	str	r2, [r3, #20]
}
 80002f2:	46c0      	nop			; (mov r8, r8)
 80002f4:	46bd      	mov	sp, r7
 80002f6:	b002      	add	sp, #8
 80002f8:	bd80      	pop	{r7, pc}
 80002fa:	46c0      	nop			; (mov r8, r8)
 80002fc:	40021000 	.word	0x40021000
 8000300:	48000400 	.word	0x48000400
 8000304:	48000800 	.word	0x48000800
 8000308:	48000c00 	.word	0x48000c00
 800030c:	48001000 	.word	0x48001000
 8000310:	48001400 	.word	0x48001400

08000314 <GPIO_Init>:

/*
 * Init and De-Init
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000314:	b5b0      	push	{r4, r5, r7, lr}
 8000316:	b086      	sub	sp, #24
 8000318:	af00      	add	r7, sp, #0
 800031a:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0;
 800031c:	2300      	movs	r3, #0
 800031e:	617b      	str	r3, [r7, #20]

	/* Enable the peripheral clock */
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	2101      	movs	r1, #1
 8000326:	0018      	movs	r0, r3
 8000328:	f7ff ff90 	bl	800024c <GPIO_PeriClockControl>

	// 1. configure the mode of gpio pin
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	795b      	ldrb	r3, [r3, #5]
 8000330:	2b03      	cmp	r3, #3
 8000332:	d81f      	bhi.n	8000374 <GPIO_Init+0x60>
	{
		// non-interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	795b      	ldrb	r3, [r3, #5]
 8000338:	001a      	movs	r2, r3
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	791b      	ldrb	r3, [r3, #4]
 800033e:	005b      	lsls	r3, r3, #1
 8000340:	409a      	lsls	r2, r3
 8000342:	0013      	movs	r3, r2
 8000344:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	681a      	ldr	r2, [r3, #0]
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	791b      	ldrb	r3, [r3, #4]
 8000350:	0019      	movs	r1, r3
 8000352:	2303      	movs	r3, #3
 8000354:	408b      	lsls	r3, r1
 8000356:	43db      	mvns	r3, r3
 8000358:	0019      	movs	r1, r3
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	681b      	ldr	r3, [r3, #0]
 800035e:	400a      	ands	r2, r1
 8000360:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	6819      	ldr	r1, [r3, #0]
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	697a      	ldr	r2, [r7, #20]
 800036e:	430a      	orrs	r2, r1
 8000370:	601a      	str	r2, [r3, #0]
 8000372:	e0a9      	b.n	80004c8 <GPIO_Init+0x1b4>
	}
	else
	{
		if(GPIO_MODE_IT_FT == pGPIOHandle->GPIO_PinConfig.GPIO_PinMode)
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	795b      	ldrb	r3, [r3, #5]
 8000378:	2b04      	cmp	r3, #4
 800037a:	d117      	bne.n	80003ac <GPIO_Init+0x98>
		{
			/* 1. Configure the FTSR */
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800037c:	4ba6      	ldr	r3, [pc, #664]	; (8000618 <GPIO_Init+0x304>)
 800037e:	68da      	ldr	r2, [r3, #12]
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	791b      	ldrb	r3, [r3, #4]
 8000384:	0019      	movs	r1, r3
 8000386:	2301      	movs	r3, #1
 8000388:	408b      	lsls	r3, r1
 800038a:	0019      	movs	r1, r3
 800038c:	4ba2      	ldr	r3, [pc, #648]	; (8000618 <GPIO_Init+0x304>)
 800038e:	430a      	orrs	r2, r1
 8000390:	60da      	str	r2, [r3, #12]
			/* Clear the corresponding RTSR bit */
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000392:	4ba1      	ldr	r3, [pc, #644]	; (8000618 <GPIO_Init+0x304>)
 8000394:	689a      	ldr	r2, [r3, #8]
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	791b      	ldrb	r3, [r3, #4]
 800039a:	0019      	movs	r1, r3
 800039c:	2301      	movs	r3, #1
 800039e:	408b      	lsls	r3, r1
 80003a0:	43db      	mvns	r3, r3
 80003a2:	0019      	movs	r1, r3
 80003a4:	4b9c      	ldr	r3, [pc, #624]	; (8000618 <GPIO_Init+0x304>)
 80003a6:	400a      	ands	r2, r1
 80003a8:	609a      	str	r2, [r3, #8]
 80003aa:	e035      	b.n	8000418 <GPIO_Init+0x104>
		}
		else if(GPIO_MODE_IT_RT == pGPIOHandle->GPIO_PinConfig.GPIO_PinMode)
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	795b      	ldrb	r3, [r3, #5]
 80003b0:	2b05      	cmp	r3, #5
 80003b2:	d117      	bne.n	80003e4 <GPIO_Init+0xd0>
		{
			/* 1. Configure the RTSR */
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80003b4:	4b98      	ldr	r3, [pc, #608]	; (8000618 <GPIO_Init+0x304>)
 80003b6:	689a      	ldr	r2, [r3, #8]
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	791b      	ldrb	r3, [r3, #4]
 80003bc:	0019      	movs	r1, r3
 80003be:	2301      	movs	r3, #1
 80003c0:	408b      	lsls	r3, r1
 80003c2:	0019      	movs	r1, r3
 80003c4:	4b94      	ldr	r3, [pc, #592]	; (8000618 <GPIO_Init+0x304>)
 80003c6:	430a      	orrs	r2, r1
 80003c8:	609a      	str	r2, [r3, #8]
			/* Clear the corresponding RTSR bit */
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80003ca:	4b93      	ldr	r3, [pc, #588]	; (8000618 <GPIO_Init+0x304>)
 80003cc:	68da      	ldr	r2, [r3, #12]
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	791b      	ldrb	r3, [r3, #4]
 80003d2:	0019      	movs	r1, r3
 80003d4:	2301      	movs	r3, #1
 80003d6:	408b      	lsls	r3, r1
 80003d8:	43db      	mvns	r3, r3
 80003da:	0019      	movs	r1, r3
 80003dc:	4b8e      	ldr	r3, [pc, #568]	; (8000618 <GPIO_Init+0x304>)
 80003de:	400a      	ands	r2, r1
 80003e0:	60da      	str	r2, [r3, #12]
 80003e2:	e019      	b.n	8000418 <GPIO_Init+0x104>
		}
		else if(GPIO_MODE_IT_RFT == pGPIOHandle->GPIO_PinConfig.GPIO_PinMode)
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	795b      	ldrb	r3, [r3, #5]
 80003e8:	2b06      	cmp	r3, #6
 80003ea:	d115      	bne.n	8000418 <GPIO_Init+0x104>
		{
			/* 1. Configure the FTSR and RTSR */
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80003ec:	4b8a      	ldr	r3, [pc, #552]	; (8000618 <GPIO_Init+0x304>)
 80003ee:	68da      	ldr	r2, [r3, #12]
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	791b      	ldrb	r3, [r3, #4]
 80003f4:	0019      	movs	r1, r3
 80003f6:	2301      	movs	r3, #1
 80003f8:	408b      	lsls	r3, r1
 80003fa:	0019      	movs	r1, r3
 80003fc:	4b86      	ldr	r3, [pc, #536]	; (8000618 <GPIO_Init+0x304>)
 80003fe:	430a      	orrs	r2, r1
 8000400:	60da      	str	r2, [r3, #12]
			/* Clear the corresponding RTSR bit */
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000402:	4b85      	ldr	r3, [pc, #532]	; (8000618 <GPIO_Init+0x304>)
 8000404:	689a      	ldr	r2, [r3, #8]
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	791b      	ldrb	r3, [r3, #4]
 800040a:	0019      	movs	r1, r3
 800040c:	2301      	movs	r3, #1
 800040e:	408b      	lsls	r3, r1
 8000410:	0019      	movs	r1, r3
 8000412:	4b81      	ldr	r3, [pc, #516]	; (8000618 <GPIO_Init+0x304>)
 8000414:	430a      	orrs	r2, r1
 8000416:	609a      	str	r2, [r3, #8]
		}

		/* 2. Configure the GPIO port selection in SYSCFG_EXTICR */
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	791a      	ldrb	r2, [r3, #4]
 800041c:	2313      	movs	r3, #19
 800041e:	18fb      	adds	r3, r7, r3
 8000420:	0892      	lsrs	r2, r2, #2
 8000422:	701a      	strb	r2, [r3, #0]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	791a      	ldrb	r2, [r3, #4]
 8000428:	2312      	movs	r3, #18
 800042a:	18fb      	adds	r3, r7, r3
 800042c:	2103      	movs	r1, #3
 800042e:	400a      	ands	r2, r1
 8000430:	701a      	strb	r2, [r3, #0]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	681a      	ldr	r2, [r3, #0]
 8000436:	2390      	movs	r3, #144	; 0x90
 8000438:	05db      	lsls	r3, r3, #23
 800043a:	429a      	cmp	r2, r3
 800043c:	d024      	beq.n	8000488 <GPIO_Init+0x174>
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	4a76      	ldr	r2, [pc, #472]	; (800061c <GPIO_Init+0x308>)
 8000444:	4293      	cmp	r3, r2
 8000446:	d01d      	beq.n	8000484 <GPIO_Init+0x170>
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	4a74      	ldr	r2, [pc, #464]	; (8000620 <GPIO_Init+0x30c>)
 800044e:	4293      	cmp	r3, r2
 8000450:	d016      	beq.n	8000480 <GPIO_Init+0x16c>
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	681b      	ldr	r3, [r3, #0]
 8000456:	4a73      	ldr	r2, [pc, #460]	; (8000624 <GPIO_Init+0x310>)
 8000458:	4293      	cmp	r3, r2
 800045a:	d00f      	beq.n	800047c <GPIO_Init+0x168>
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	4a71      	ldr	r2, [pc, #452]	; (8000628 <GPIO_Init+0x314>)
 8000462:	4293      	cmp	r3, r2
 8000464:	d008      	beq.n	8000478 <GPIO_Init+0x164>
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	4a70      	ldr	r2, [pc, #448]	; (800062c <GPIO_Init+0x318>)
 800046c:	4293      	cmp	r3, r2
 800046e:	d101      	bne.n	8000474 <GPIO_Init+0x160>
 8000470:	2305      	movs	r3, #5
 8000472:	e00a      	b.n	800048a <GPIO_Init+0x176>
 8000474:	2300      	movs	r3, #0
 8000476:	e008      	b.n	800048a <GPIO_Init+0x176>
 8000478:	2304      	movs	r3, #4
 800047a:	e006      	b.n	800048a <GPIO_Init+0x176>
 800047c:	2303      	movs	r3, #3
 800047e:	e004      	b.n	800048a <GPIO_Init+0x176>
 8000480:	2302      	movs	r3, #2
 8000482:	e002      	b.n	800048a <GPIO_Init+0x176>
 8000484:	2301      	movs	r3, #1
 8000486:	e000      	b.n	800048a <GPIO_Init+0x176>
 8000488:	2300      	movs	r3, #0
 800048a:	2111      	movs	r1, #17
 800048c:	187a      	adds	r2, r7, r1
 800048e:	7013      	strb	r3, [r2, #0]
		SYSCFG_PCLK_EN();
 8000490:	4b67      	ldr	r3, [pc, #412]	; (8000630 <GPIO_Init+0x31c>)
 8000492:	699b      	ldr	r3, [r3, #24]
		SYSCFG->EXTICR[temp1] = portcode << (temp2 * 4);
 8000494:	187b      	adds	r3, r7, r1
 8000496:	781a      	ldrb	r2, [r3, #0]
 8000498:	2312      	movs	r3, #18
 800049a:	18fb      	adds	r3, r7, r3
 800049c:	781b      	ldrb	r3, [r3, #0]
 800049e:	009b      	lsls	r3, r3, #2
 80004a0:	409a      	lsls	r2, r3
 80004a2:	0011      	movs	r1, r2
 80004a4:	4a63      	ldr	r2, [pc, #396]	; (8000634 <GPIO_Init+0x320>)
 80004a6:	2313      	movs	r3, #19
 80004a8:	18fb      	adds	r3, r7, r3
 80004aa:	781b      	ldrb	r3, [r3, #0]
 80004ac:	3302      	adds	r3, #2
 80004ae:	009b      	lsls	r3, r3, #2
 80004b0:	5099      	str	r1, [r3, r2]

		/* 3. Enable the EXTI interrupt delivery using IMR */
		EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 80004b2:	4b59      	ldr	r3, [pc, #356]	; (8000618 <GPIO_Init+0x304>)
 80004b4:	681a      	ldr	r2, [r3, #0]
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	791b      	ldrb	r3, [r3, #4]
 80004ba:	0019      	movs	r1, r3
 80004bc:	2301      	movs	r3, #1
 80004be:	408b      	lsls	r3, r1
 80004c0:	0019      	movs	r1, r3
 80004c2:	4b55      	ldr	r3, [pc, #340]	; (8000618 <GPIO_Init+0x304>)
 80004c4:	430a      	orrs	r2, r1
 80004c6:	601a      	str	r2, [r3, #0]
	}


	temp = 0;
 80004c8:	2300      	movs	r3, #0
 80004ca:	617b      	str	r3, [r7, #20]

	// 2. configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	799b      	ldrb	r3, [r3, #6]
 80004d0:	001a      	movs	r2, r3
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	791b      	ldrb	r3, [r3, #4]
 80004d6:	005b      	lsls	r3, r3, #1
 80004d8:	409a      	lsls	r2, r3
 80004da:	0013      	movs	r3, r2
 80004dc:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	689a      	ldr	r2, [r3, #8]
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	791b      	ldrb	r3, [r3, #4]
 80004e8:	0019      	movs	r1, r3
 80004ea:	2303      	movs	r3, #3
 80004ec:	408b      	lsls	r3, r1
 80004ee:	43db      	mvns	r3, r3
 80004f0:	0019      	movs	r1, r3
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	400a      	ands	r2, r1
 80004f8:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	6899      	ldr	r1, [r3, #8]
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	697a      	ldr	r2, [r7, #20]
 8000506:	430a      	orrs	r2, r1
 8000508:	609a      	str	r2, [r3, #8]

	temp = 0;
 800050a:	2300      	movs	r3, #0
 800050c:	617b      	str	r3, [r7, #20]

	// 3. configure the pupd settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	79db      	ldrb	r3, [r3, #7]
 8000512:	001a      	movs	r2, r3
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	791b      	ldrb	r3, [r3, #4]
 8000518:	005b      	lsls	r3, r3, #1
 800051a:	409a      	lsls	r2, r3
 800051c:	0013      	movs	r3, r2
 800051e:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	68da      	ldr	r2, [r3, #12]
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	791b      	ldrb	r3, [r3, #4]
 800052a:	0019      	movs	r1, r3
 800052c:	2303      	movs	r3, #3
 800052e:	408b      	lsls	r3, r1
 8000530:	43db      	mvns	r3, r3
 8000532:	0019      	movs	r1, r3
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	400a      	ands	r2, r1
 800053a:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	68d9      	ldr	r1, [r3, #12]
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	697a      	ldr	r2, [r7, #20]
 8000548:	430a      	orrs	r2, r1
 800054a:	60da      	str	r2, [r3, #12]

	temp = 0;
 800054c:	2300      	movs	r3, #0
 800054e:	617b      	str	r3, [r7, #20]

	// 4.configure the optype
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType));
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	7a1b      	ldrb	r3, [r3, #8]
 8000554:	001a      	movs	r2, r3
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	7a1b      	ldrb	r3, [r3, #8]
 800055a:	005b      	lsls	r3, r3, #1
 800055c:	409a      	lsls	r2, r3
 800055e:	0013      	movs	r3, r2
 8000560:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	685a      	ldr	r2, [r3, #4]
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	791b      	ldrb	r3, [r3, #4]
 800056c:	0019      	movs	r1, r3
 800056e:	2303      	movs	r3, #3
 8000570:	408b      	lsls	r3, r1
 8000572:	43db      	mvns	r3, r3
 8000574:	0019      	movs	r1, r3
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	400a      	ands	r2, r1
 800057c:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	6859      	ldr	r1, [r3, #4]
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	697a      	ldr	r2, [r7, #20]
 800058a:	430a      	orrs	r2, r1
 800058c:	605a      	str	r2, [r3, #4]

	// 5. configure the alt functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	795b      	ldrb	r3, [r3, #5]
 8000592:	2b02      	cmp	r3, #2
 8000594:	d13b      	bne.n	800060e <GPIO_Init+0x2fa>
	{
		// configure the alt function registers.
		uint8_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	791a      	ldrb	r2, [r3, #4]
 800059a:	2410      	movs	r4, #16
 800059c:	193b      	adds	r3, r7, r4
 800059e:	08d2      	lsrs	r2, r2, #3
 80005a0:	701a      	strb	r2, [r3, #0]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	791a      	ldrb	r2, [r3, #4]
 80005a6:	250f      	movs	r5, #15
 80005a8:	197b      	adds	r3, r7, r5
 80005aa:	2107      	movs	r1, #7
 80005ac:	400a      	ands	r2, r1
 80005ae:	701a      	strb	r2, [r3, #0]

		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4 * temp2));
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	193a      	adds	r2, r7, r4
 80005b6:	7812      	ldrb	r2, [r2, #0]
 80005b8:	3208      	adds	r2, #8
 80005ba:	0092      	lsls	r2, r2, #2
 80005bc:	58d1      	ldr	r1, [r2, r3]
 80005be:	197b      	adds	r3, r7, r5
 80005c0:	781b      	ldrb	r3, [r3, #0]
 80005c2:	009b      	lsls	r3, r3, #2
 80005c4:	220f      	movs	r2, #15
 80005c6:	409a      	lsls	r2, r3
 80005c8:	0013      	movs	r3, r2
 80005ca:	43db      	mvns	r3, r3
 80005cc:	0018      	movs	r0, r3
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	193a      	adds	r2, r7, r4
 80005d4:	7812      	ldrb	r2, [r2, #0]
 80005d6:	4001      	ands	r1, r0
 80005d8:	3208      	adds	r2, #8
 80005da:	0092      	lsls	r2, r2, #2
 80005dc:	50d1      	str	r1, [r2, r3]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2));
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	193a      	adds	r2, r7, r4
 80005e4:	7812      	ldrb	r2, [r2, #0]
 80005e6:	3208      	adds	r2, #8
 80005e8:	0092      	lsls	r2, r2, #2
 80005ea:	58d1      	ldr	r1, [r2, r3]
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	7a5b      	ldrb	r3, [r3, #9]
 80005f0:	001a      	movs	r2, r3
 80005f2:	197b      	adds	r3, r7, r5
 80005f4:	781b      	ldrb	r3, [r3, #0]
 80005f6:	009b      	lsls	r3, r3, #2
 80005f8:	409a      	lsls	r2, r3
 80005fa:	0013      	movs	r3, r2
 80005fc:	0018      	movs	r0, r3
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	193a      	adds	r2, r7, r4
 8000604:	7812      	ldrb	r2, [r2, #0]
 8000606:	4301      	orrs	r1, r0
 8000608:	3208      	adds	r2, #8
 800060a:	0092      	lsls	r2, r2, #2
 800060c:	50d1      	str	r1, [r2, r3]
	}
}
 800060e:	46c0      	nop			; (mov r8, r8)
 8000610:	46bd      	mov	sp, r7
 8000612:	b006      	add	sp, #24
 8000614:	bdb0      	pop	{r4, r5, r7, pc}
 8000616:	46c0      	nop			; (mov r8, r8)
 8000618:	40010400 	.word	0x40010400
 800061c:	48000400 	.word	0x48000400
 8000620:	48000800 	.word	0x48000800
 8000624:	48000c00 	.word	0x48000c00
 8000628:	48001000 	.word	0x48001000
 800062c:	48001400 	.word	0x48001400
 8000630:	40021000 	.word	0x40021000
 8000634:	40010000 	.word	0x40010000

08000638 <SPI_PeriClockControl>:

/*
 * Peripheral Clock Setup
 */
void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
 8000640:	000a      	movs	r2, r1
 8000642:	1cfb      	adds	r3, r7, #3
 8000644:	701a      	strb	r2, [r3, #0]
	if(EnorDi == ENABLE)
 8000646:	1cfb      	adds	r3, r7, #3
 8000648:	781b      	ldrb	r3, [r3, #0]
 800064a:	2b01      	cmp	r3, #1
 800064c:	d116      	bne.n	800067c <SPI_PeriClockControl+0x44>
	{
		if(pSPIx == SPI1)
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	4a0c      	ldr	r2, [pc, #48]	; (8000684 <SPI_PeriClockControl+0x4c>)
 8000652:	4293      	cmp	r3, r2
 8000654:	d107      	bne.n	8000666 <SPI_PeriClockControl+0x2e>
		{
			SPI1_PCLOCK_EN();
 8000656:	4b0c      	ldr	r3, [pc, #48]	; (8000688 <SPI_PeriClockControl+0x50>)
 8000658:	699a      	ldr	r2, [r3, #24]
 800065a:	4b0b      	ldr	r3, [pc, #44]	; (8000688 <SPI_PeriClockControl+0x50>)
 800065c:	2180      	movs	r1, #128	; 0x80
 800065e:	0149      	lsls	r1, r1, #5
 8000660:	430a      	orrs	r2, r1
 8000662:	619a      	str	r2, [r3, #24]
	}
	else
	{
		// use macros to disable as in above code
	}
}
 8000664:	e00a      	b.n	800067c <SPI_PeriClockControl+0x44>
		else if(pSPIx == SPI2)
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	4a08      	ldr	r2, [pc, #32]	; (800068c <SPI_PeriClockControl+0x54>)
 800066a:	4293      	cmp	r3, r2
 800066c:	d106      	bne.n	800067c <SPI_PeriClockControl+0x44>
			SPI2_PCLOCK_EN();
 800066e:	4b06      	ldr	r3, [pc, #24]	; (8000688 <SPI_PeriClockControl+0x50>)
 8000670:	69da      	ldr	r2, [r3, #28]
 8000672:	4b05      	ldr	r3, [pc, #20]	; (8000688 <SPI_PeriClockControl+0x50>)
 8000674:	2180      	movs	r1, #128	; 0x80
 8000676:	01c9      	lsls	r1, r1, #7
 8000678:	430a      	orrs	r2, r1
 800067a:	61da      	str	r2, [r3, #28]
}
 800067c:	46c0      	nop			; (mov r8, r8)
 800067e:	46bd      	mov	sp, r7
 8000680:	b002      	add	sp, #8
 8000682:	bd80      	pop	{r7, pc}
 8000684:	40013000 	.word	0x40013000
 8000688:	40021000 	.word	0x40021000
 800068c:	40003800 	.word	0x40003800

08000690 <SPI_Init>:

/*
 * Init and De-Init
 */
void SPI_Init(SPI_Handle_t *pSPIHandle)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b084      	sub	sp, #16
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
	/* Peripheral clock enable */
	SPI_PeriClockControl(pSPIHandle->pSPIx, ENABLE);
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	2101      	movs	r1, #1
 800069e:	0018      	movs	r0, r3
 80006a0:	f7ff ffca 	bl	8000638 <SPI_PeriClockControl>

	/* First lets configure the SPI_CR1 register */
	uint32_t tempreg = 0;
 80006a4:	2300      	movs	r3, #0
 80006a6:	60fb      	str	r3, [r7, #12]

	/* 1. Configure the device mode */
	tempreg |= pSPIHandle->SPIConfig.SPI_DeviceMode << SPI_CR1_MSTR;
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	791b      	ldrb	r3, [r3, #4]
 80006ac:	009b      	lsls	r3, r3, #2
 80006ae:	001a      	movs	r2, r3
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	4313      	orrs	r3, r2
 80006b4:	60fb      	str	r3, [r7, #12]

	/* 2. Configure the bus config */
	if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_FD)
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	795b      	ldrb	r3, [r3, #5]
 80006ba:	2b01      	cmp	r3, #1
 80006bc:	d104      	bne.n	80006c8 <SPI_Init+0x38>
	{
		/* bidi mode should be cleared */
		tempreg &= ~( 1 << SPI_CR1_BIDIMODE );
 80006be:	68fb      	ldr	r3, [r7, #12]
 80006c0:	4a1b      	ldr	r2, [pc, #108]	; (8000730 <SPI_Init+0xa0>)
 80006c2:	4013      	ands	r3, r2
 80006c4:	60fb      	str	r3, [r7, #12]
 80006c6:	e016      	b.n	80006f6 <SPI_Init+0x66>
	}else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_HD)
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	795b      	ldrb	r3, [r3, #5]
 80006cc:	2b02      	cmp	r3, #2
 80006ce:	d105      	bne.n	80006dc <SPI_Init+0x4c>
	{
		/* bidi mode should be set */
		tempreg |= ( 1 << SPI_CR1_BIDIMODE );
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	2280      	movs	r2, #128	; 0x80
 80006d4:	0212      	lsls	r2, r2, #8
 80006d6:	4313      	orrs	r3, r2
 80006d8:	60fb      	str	r3, [r7, #12]
 80006da:	e00c      	b.n	80006f6 <SPI_Init+0x66>
	}
	else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RXONLY)
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	795b      	ldrb	r3, [r3, #5]
 80006e0:	2b03      	cmp	r3, #3
 80006e2:	d108      	bne.n	80006f6 <SPI_Init+0x66>
	{
		/* BIDI mode should be cleared */
		tempreg &= ~( 1 << SPI_CR1_BIDIMODE );
 80006e4:	68fb      	ldr	r3, [r7, #12]
 80006e6:	4a12      	ldr	r2, [pc, #72]	; (8000730 <SPI_Init+0xa0>)
 80006e8:	4013      	ands	r3, r2
 80006ea:	60fb      	str	r3, [r7, #12]
		/* RXONLY bit must be set */
		tempreg |= ( 1 << SPI_CR1_RXONLY );
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	2280      	movs	r2, #128	; 0x80
 80006f0:	00d2      	lsls	r2, r2, #3
 80006f2:	4313      	orrs	r3, r2
 80006f4:	60fb      	str	r3, [r7, #12]
	}

	/* 3. Configure the spi serial clock speed (baud rate) */
	tempreg |= pSPIHandle->SPIConfig.SPI_SclkSpeed << SPI_CR1_BR;
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	799b      	ldrb	r3, [r3, #6]
 80006fa:	00db      	lsls	r3, r3, #3
 80006fc:	001a      	movs	r2, r3
 80006fe:	68fb      	ldr	r3, [r7, #12]
 8000700:	4313      	orrs	r3, r2
 8000702:	60fb      	str	r3, [r7, #12]

	/* 4. Configure the DFF */
	//tempreg |= pSPIHandle->SPIConfig.SPI_DFF << 11;

	/* 5. Configure the CPOL */
	tempreg |= pSPIHandle->SPIConfig.SPI_CPOL << SPI_CR1_CPOL;
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	7a1b      	ldrb	r3, [r3, #8]
 8000708:	005b      	lsls	r3, r3, #1
 800070a:	001a      	movs	r2, r3
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	4313      	orrs	r3, r2
 8000710:	60fb      	str	r3, [r7, #12]

	/* 6. Configure the CPHA */
	tempreg |= pSPIHandle->SPIConfig.SPI_CPHA << SPI_CR1_CPHA;
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	7a5b      	ldrb	r3, [r3, #9]
 8000716:	001a      	movs	r2, r3
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	4313      	orrs	r3, r2
 800071c:	60fb      	str	r3, [r7, #12]

	pSPIHandle->pSPIx->CR1 = tempreg;
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	68fa      	ldr	r2, [r7, #12]
 8000724:	601a      	str	r2, [r3, #0]
}
 8000726:	46c0      	nop			; (mov r8, r8)
 8000728:	46bd      	mov	sp, r7
 800072a:	b004      	add	sp, #16
 800072c:	bd80      	pop	{r7, pc}
 800072e:	46c0      	nop			; (mov r8, r8)
 8000730:	ffff7fff 	.word	0xffff7fff

08000734 <SPI_GetFlagStatus>:
{
	//TODO
}

uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx, uint32_t flagName)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
 800073c:	6039      	str	r1, [r7, #0]
	if(pSPIx->SR & flagName)
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	689b      	ldr	r3, [r3, #8]
 8000742:	683a      	ldr	r2, [r7, #0]
 8000744:	4013      	ands	r3, r2
 8000746:	d001      	beq.n	800074c <SPI_GetFlagStatus+0x18>
	{
		return FLAG_SET;
 8000748:	2301      	movs	r3, #1
 800074a:	e000      	b.n	800074e <SPI_GetFlagStatus+0x1a>
	}
	return FLAG_RESET;
 800074c:	2300      	movs	r3, #0
}
 800074e:	0018      	movs	r0, r3
 8000750:	46bd      	mov	sp, r7
 8000752:	b002      	add	sp, #8
 8000754:	bd80      	pop	{r7, pc}

08000756 <SPI_SendData>:

/*
 * Data Send and Receive
 */
void SPI_SendData(SPI_RegDef_t *pSPIx, uint8_t *pTxBuffer, uint32_t Len)
{
 8000756:	b580      	push	{r7, lr}
 8000758:	b084      	sub	sp, #16
 800075a:	af00      	add	r7, sp, #0
 800075c:	60f8      	str	r0, [r7, #12]
 800075e:	60b9      	str	r1, [r7, #8]
 8000760:	607a      	str	r2, [r7, #4]
	while(Len > 0)
 8000762:	e027      	b.n	80007b4 <SPI_SendData+0x5e>
	{
		/* 1. wait until TXE is set */
		while( SPI_GetFlagStatus(pSPIx, SPI_TXE_FLAG) == FLAG_RESET );
 8000764:	46c0      	nop			; (mov r8, r8)
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	2102      	movs	r1, #2
 800076a:	0018      	movs	r0, r3
 800076c:	f7ff ffe2 	bl	8000734 <SPI_GetFlagStatus>
 8000770:	1e03      	subs	r3, r0, #0
 8000772:	d0f8      	beq.n	8000766 <SPI_SendData+0x10>

		/* 2. Check the DFF bit in CR1 */
		if((pSPIx->CR1 & (1 << SPI_CR1_CRCL)))
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	681a      	ldr	r2, [r3, #0]
 8000778:	2380      	movs	r3, #128	; 0x80
 800077a:	011b      	lsls	r3, r3, #4
 800077c:	4013      	ands	r3, r2
 800077e:	d00e      	beq.n	800079e <SPI_SendData+0x48>
		{
			// 16 bit DFF
			/* 1. load the data in to the DR */
			pSPIx->DR = *((uint16_t*)pTxBuffer);
 8000780:	68bb      	ldr	r3, [r7, #8]
 8000782:	881b      	ldrh	r3, [r3, #0]
 8000784:	001a      	movs	r2, r3
 8000786:	68fb      	ldr	r3, [r7, #12]
 8000788:	60da      	str	r2, [r3, #12]
			Len--;
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	3b01      	subs	r3, #1
 800078e:	607b      	str	r3, [r7, #4]
			Len--;
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	3b01      	subs	r3, #1
 8000794:	607b      	str	r3, [r7, #4]
			(uint16_t*)pTxBuffer++;
 8000796:	68bb      	ldr	r3, [r7, #8]
 8000798:	3301      	adds	r3, #1
 800079a:	60bb      	str	r3, [r7, #8]
 800079c:	e00a      	b.n	80007b4 <SPI_SendData+0x5e>
		}
		else
		{
			// 8 bit DFF
			pSPIx->DR = *(pTxBuffer);
 800079e:	68bb      	ldr	r3, [r7, #8]
 80007a0:	781b      	ldrb	r3, [r3, #0]
 80007a2:	001a      	movs	r2, r3
 80007a4:	68fb      	ldr	r3, [r7, #12]
 80007a6:	60da      	str	r2, [r3, #12]
			Len--;
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	3b01      	subs	r3, #1
 80007ac:	607b      	str	r3, [r7, #4]
			pTxBuffer++;
 80007ae:	68bb      	ldr	r3, [r7, #8]
 80007b0:	3301      	adds	r3, #1
 80007b2:	60bb      	str	r3, [r7, #8]
	while(Len > 0)
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d1d4      	bne.n	8000764 <SPI_SendData+0xe>
		}
	}
}
 80007ba:	46c0      	nop			; (mov r8, r8)
 80007bc:	46bd      	mov	sp, r7
 80007be:	b004      	add	sp, #16
 80007c0:	bd80      	pop	{r7, pc}

080007c2 <SPI_PeripheralControl>:
{

}

void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
 80007c2:	b580      	push	{r7, lr}
 80007c4:	b082      	sub	sp, #8
 80007c6:	af00      	add	r7, sp, #0
 80007c8:	6078      	str	r0, [r7, #4]
 80007ca:	000a      	movs	r2, r1
 80007cc:	1cfb      	adds	r3, r7, #3
 80007ce:	701a      	strb	r2, [r3, #0]
	if(EnOrDi == ENABLE)
 80007d0:	1cfb      	adds	r3, r7, #3
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	2b01      	cmp	r3, #1
 80007d6:	d106      	bne.n	80007e6 <SPI_PeripheralControl+0x24>
	{
		pSPIx->CR1 |= (1 << SPI_CR1_SPE);
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	2240      	movs	r2, #64	; 0x40
 80007de:	431a      	orrs	r2, r3
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
	}
}
 80007e4:	e006      	b.n	80007f4 <SPI_PeripheralControl+0x32>
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	2240      	movs	r2, #64	; 0x40
 80007ec:	4393      	bics	r3, r2
 80007ee:	001a      	movs	r2, r3
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	601a      	str	r2, [r3, #0]
}
 80007f4:	46c0      	nop			; (mov r8, r8)
 80007f6:	46bd      	mov	sp, r7
 80007f8:	b002      	add	sp, #8
 80007fa:	bd80      	pop	{r7, pc}

080007fc <__libc_init_array>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	2600      	movs	r6, #0
 8000800:	4d0c      	ldr	r5, [pc, #48]	; (8000834 <__libc_init_array+0x38>)
 8000802:	4c0d      	ldr	r4, [pc, #52]	; (8000838 <__libc_init_array+0x3c>)
 8000804:	1b64      	subs	r4, r4, r5
 8000806:	10a4      	asrs	r4, r4, #2
 8000808:	42a6      	cmp	r6, r4
 800080a:	d109      	bne.n	8000820 <__libc_init_array+0x24>
 800080c:	2600      	movs	r6, #0
 800080e:	f000 f819 	bl	8000844 <_init>
 8000812:	4d0a      	ldr	r5, [pc, #40]	; (800083c <__libc_init_array+0x40>)
 8000814:	4c0a      	ldr	r4, [pc, #40]	; (8000840 <__libc_init_array+0x44>)
 8000816:	1b64      	subs	r4, r4, r5
 8000818:	10a4      	asrs	r4, r4, #2
 800081a:	42a6      	cmp	r6, r4
 800081c:	d105      	bne.n	800082a <__libc_init_array+0x2e>
 800081e:	bd70      	pop	{r4, r5, r6, pc}
 8000820:	00b3      	lsls	r3, r6, #2
 8000822:	58eb      	ldr	r3, [r5, r3]
 8000824:	4798      	blx	r3
 8000826:	3601      	adds	r6, #1
 8000828:	e7ee      	b.n	8000808 <__libc_init_array+0xc>
 800082a:	00b3      	lsls	r3, r6, #2
 800082c:	58eb      	ldr	r3, [r5, r3]
 800082e:	4798      	blx	r3
 8000830:	3601      	adds	r6, #1
 8000832:	e7f2      	b.n	800081a <__libc_init_array+0x1e>
 8000834:	08000868 	.word	0x08000868
 8000838:	08000868 	.word	0x08000868
 800083c:	08000868 	.word	0x08000868
 8000840:	0800086c 	.word	0x0800086c

08000844 <_init>:
 8000844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000846:	46c0      	nop			; (mov r8, r8)
 8000848:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800084a:	bc08      	pop	{r3}
 800084c:	469e      	mov	lr, r3
 800084e:	4770      	bx	lr

08000850 <_fini>:
 8000850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000852:	46c0      	nop			; (mov r8, r8)
 8000854:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000856:	bc08      	pop	{r3}
 8000858:	469e      	mov	lr, r3
 800085a:	4770      	bx	lr
