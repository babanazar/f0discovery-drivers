
f0discovery-drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000006c8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000788  08000790  00010790  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000788  08000788  00010790  2**0
                  CONTENTS
  4 .ARM          00000000  08000788  08000788  00010790  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000788  08000790  00010790  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000788  08000788  00010788  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800078c  0800078c  0001078c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010790  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000790  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000790  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00010790  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000842  00000000  00000000  000107b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000001e1  00000000  00000000  00010ffa  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000000c0  00000000  00000000  000111e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000098  00000000  00000000  000112a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00001234  00000000  00000000  00011338  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00000a78  00000000  00000000  0001256c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00004a35  00000000  00000000  00012fe4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00017a19  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000001ec  00000000  00000000  00017a94  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000000 	.word	0x20000000
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08000770 	.word	0x08000770

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000004 	.word	0x20000004
 8000104:	08000770 	.word	0x08000770

08000108 <main>:
#define HIGH			ENABLE
#define BUTTON_PRESSED	HIGH


int main(void)
{
 8000108:	b590      	push	{r4, r7, lr}
 800010a:	b087      	sub	sp, #28
 800010c:	af00      	add	r7, sp, #0
	GPIO_Handle_t gpioLed, gpioButton;

	gpioLed.pGPIOx = GPIOC;
 800010e:	240c      	movs	r4, #12
 8000110:	193b      	adds	r3, r7, r4
 8000112:	4a1e      	ldr	r2, [pc, #120]	; (800018c <main+0x84>)
 8000114:	601a      	str	r2, [r3, #0]
	gpioLed.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_9;
 8000116:	193b      	adds	r3, r7, r4
 8000118:	2209      	movs	r2, #9
 800011a:	711a      	strb	r2, [r3, #4]
	gpioLed.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 800011c:	193b      	adds	r3, r7, r4
 800011e:	2201      	movs	r2, #1
 8000120:	715a      	strb	r2, [r3, #5]
	gpioLed.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000122:	193b      	adds	r3, r7, r4
 8000124:	2202      	movs	r2, #2
 8000126:	719a      	strb	r2, [r3, #6]
	gpioLed.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000128:	193b      	adds	r3, r7, r4
 800012a:	2200      	movs	r2, #0
 800012c:	721a      	strb	r2, [r3, #8]
	gpioLed.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPPD;
 800012e:	193b      	adds	r3, r7, r4
 8000130:	2200      	movs	r2, #0
 8000132:	71da      	strb	r2, [r3, #7]

	GPIO_PeriClockControl(GPIOC, ENABLE);
 8000134:	4b15      	ldr	r3, [pc, #84]	; (800018c <main+0x84>)
 8000136:	2101      	movs	r1, #1
 8000138:	0018      	movs	r0, r3
 800013a:	f000 f861 	bl	8000200 <GPIO_PeriClockControl>

	GPIO_Init(&gpioLed);
 800013e:	193b      	adds	r3, r7, r4
 8000140:	0018      	movs	r0, r3
 8000142:	f000 f8c1 	bl	80002c8 <GPIO_Init>

	/* Button GPIO configuration */
	gpioButton.pGPIOx = GPIOA;
 8000146:	003b      	movs	r3, r7
 8000148:	2290      	movs	r2, #144	; 0x90
 800014a:	05d2      	lsls	r2, r2, #23
 800014c:	601a      	str	r2, [r3, #0]
	gpioButton.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_0;
 800014e:	003b      	movs	r3, r7
 8000150:	2200      	movs	r2, #0
 8000152:	711a      	strb	r2, [r3, #4]
	gpioButton.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IT_FT;
 8000154:	003b      	movs	r3, r7
 8000156:	2204      	movs	r2, #4
 8000158:	715a      	strb	r2, [r3, #5]
	gpioButton.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800015a:	003b      	movs	r3, r7
 800015c:	2202      	movs	r2, #2
 800015e:	719a      	strb	r2, [r3, #6]
	gpioButton.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 8000160:	003b      	movs	r3, r7
 8000162:	2201      	movs	r2, #1
 8000164:	71da      	strb	r2, [r3, #7]

	GPIO_PeriClockControl(GPIOA, ENABLE);
 8000166:	2390      	movs	r3, #144	; 0x90
 8000168:	05db      	lsls	r3, r3, #23
 800016a:	2101      	movs	r1, #1
 800016c:	0018      	movs	r0, r3
 800016e:	f000 f847 	bl	8000200 <GPIO_PeriClockControl>

	GPIO_Init(&gpioButton);
 8000172:	003b      	movs	r3, r7
 8000174:	0018      	movs	r0, r3
 8000176:	f000 f8a7 	bl	80002c8 <GPIO_Init>


	/* IRQ configuration */
	GPIO_IRQPriorityConfig(IRQ_NO_EXTI0_1, NVIC_IRQ_PRI_15);
 800017a:	210f      	movs	r1, #15
 800017c:	2005      	movs	r0, #5
 800017e:	f000 fa79 	bl	8000674 <GPIO_IRQPriorityConfig>
	GPIO_IRQInterruptConfig(IRQ_NO_EXTI0_1, ENABLE);
 8000182:	2101      	movs	r1, #1
 8000184:	2005      	movs	r0, #5
 8000186:	f000 fa41 	bl	800060c <GPIO_IRQInterruptConfig>

	while(1);
 800018a:	e7fe      	b.n	800018a <main+0x82>
 800018c:	48000800 	.word	0x48000800

08000190 <EXTI0_1_IRQHandler>:
	return 0;
}


void EXTI0_1_IRQHandler(void)
{
 8000190:	b580      	push	{r7, lr}
 8000192:	af00      	add	r7, sp, #0
	GPIO_IRQHandling(GPIO_PIN_NO_0);
 8000194:	2000      	movs	r0, #0
 8000196:	f000 faa7 	bl	80006e8 <GPIO_IRQHandling>
	GPIO_ToggleOutputPin(GPIOA, GPIO_PIN_NO_0);
 800019a:	2390      	movs	r3, #144	; 0x90
 800019c:	05db      	lsls	r3, r3, #23
 800019e:	2100      	movs	r1, #0
 80001a0:	0018      	movs	r0, r3
 80001a2:	f000 fa1d 	bl	80005e0 <GPIO_ToggleOutputPin>
}
 80001a6:	46c0      	nop			; (mov r8, r8)
 80001a8:	46bd      	mov	sp, r7
 80001aa:	bd80      	pop	{r7, pc}

080001ac <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80001ac:	480d      	ldr	r0, [pc, #52]	; (80001e4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80001ae:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80001b0:	e000      	b.n	80001b4 <Reset_Handler+0x8>
 80001b2:	bf00      	nop

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80001b4:	480c      	ldr	r0, [pc, #48]	; (80001e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80001b6:	490d      	ldr	r1, [pc, #52]	; (80001ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80001b8:	4a0d      	ldr	r2, [pc, #52]	; (80001f0 <LoopForever+0xe>)
  movs r3, #0
 80001ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80001bc:	e002      	b.n	80001c4 <LoopCopyDataInit>

080001be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80001be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80001c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80001c2:	3304      	adds	r3, #4

080001c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80001c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80001c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80001c8:	d3f9      	bcc.n	80001be <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80001ca:	4a0a      	ldr	r2, [pc, #40]	; (80001f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80001cc:	4c0a      	ldr	r4, [pc, #40]	; (80001f8 <LoopForever+0x16>)
  movs r3, #0
 80001ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80001d0:	e001      	b.n	80001d6 <LoopFillZerobss>

080001d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80001d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80001d4:	3204      	adds	r2, #4

080001d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80001d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80001d8:	d3fb      	bcc.n	80001d2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80001da:	f000 faa5 	bl	8000728 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80001de:	f7ff ff93 	bl	8000108 <main>

080001e2 <LoopForever>:

LoopForever:
    b LoopForever
 80001e2:	e7fe      	b.n	80001e2 <LoopForever>
  ldr   r0, =_estack
 80001e4:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80001e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80001ec:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80001f0:	08000790 	.word	0x08000790
  ldr r2, =_sbss
 80001f4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80001f8:	2000001c 	.word	0x2000001c

080001fc <ADC_COMP_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80001fc:	e7fe      	b.n	80001fc <ADC_COMP_IRQHandler>
	...

08000200 <GPIO_PeriClockControl>:
 * @return 			- none
 *
 * @Note			- none
 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 8000200:	b580      	push	{r7, lr}
 8000202:	b082      	sub	sp, #8
 8000204:	af00      	add	r7, sp, #0
 8000206:	6078      	str	r0, [r7, #4]
 8000208:	000a      	movs	r2, r1
 800020a:	1cfb      	adds	r3, r7, #3
 800020c:	701a      	strb	r2, [r3, #0]
	if(EnorDi == ENABLE)
 800020e:	1cfb      	adds	r3, r7, #3
 8000210:	781b      	ldrb	r3, [r3, #0]
 8000212:	2b01      	cmp	r3, #1
 8000214:	d147      	bne.n	80002a6 <GPIO_PeriClockControl+0xa6>
	{
		if(pGPIOx == GPIOA)
 8000216:	687a      	ldr	r2, [r7, #4]
 8000218:	2390      	movs	r3, #144	; 0x90
 800021a:	05db      	lsls	r3, r3, #23
 800021c:	429a      	cmp	r2, r3
 800021e:	d107      	bne.n	8000230 <GPIO_PeriClockControl+0x30>
		{
			GPIOA_PCLOCK_ENABLE();
 8000220:	4b23      	ldr	r3, [pc, #140]	; (80002b0 <GPIO_PeriClockControl+0xb0>)
 8000222:	695a      	ldr	r2, [r3, #20]
 8000224:	4b22      	ldr	r3, [pc, #136]	; (80002b0 <GPIO_PeriClockControl+0xb0>)
 8000226:	2180      	movs	r1, #128	; 0x80
 8000228:	0289      	lsls	r1, r1, #10
 800022a:	430a      	orrs	r2, r1
 800022c:	615a      	str	r2, [r3, #20]
	}
	else
	{
		// use macros to disable as in above code
	}
}
 800022e:	e03a      	b.n	80002a6 <GPIO_PeriClockControl+0xa6>
		else if(pGPIOx == GPIOB)
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	4a20      	ldr	r2, [pc, #128]	; (80002b4 <GPIO_PeriClockControl+0xb4>)
 8000234:	4293      	cmp	r3, r2
 8000236:	d107      	bne.n	8000248 <GPIO_PeriClockControl+0x48>
			GPIOB_PCLOCK_ENABLE();
 8000238:	4b1d      	ldr	r3, [pc, #116]	; (80002b0 <GPIO_PeriClockControl+0xb0>)
 800023a:	695a      	ldr	r2, [r3, #20]
 800023c:	4b1c      	ldr	r3, [pc, #112]	; (80002b0 <GPIO_PeriClockControl+0xb0>)
 800023e:	2180      	movs	r1, #128	; 0x80
 8000240:	02c9      	lsls	r1, r1, #11
 8000242:	430a      	orrs	r2, r1
 8000244:	615a      	str	r2, [r3, #20]
}
 8000246:	e02e      	b.n	80002a6 <GPIO_PeriClockControl+0xa6>
		else if(pGPIOx == GPIOC)
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	4a1b      	ldr	r2, [pc, #108]	; (80002b8 <GPIO_PeriClockControl+0xb8>)
 800024c:	4293      	cmp	r3, r2
 800024e:	d107      	bne.n	8000260 <GPIO_PeriClockControl+0x60>
			GPIOC_PCLOCK_ENABLE();
 8000250:	4b17      	ldr	r3, [pc, #92]	; (80002b0 <GPIO_PeriClockControl+0xb0>)
 8000252:	695a      	ldr	r2, [r3, #20]
 8000254:	4b16      	ldr	r3, [pc, #88]	; (80002b0 <GPIO_PeriClockControl+0xb0>)
 8000256:	2180      	movs	r1, #128	; 0x80
 8000258:	0309      	lsls	r1, r1, #12
 800025a:	430a      	orrs	r2, r1
 800025c:	615a      	str	r2, [r3, #20]
}
 800025e:	e022      	b.n	80002a6 <GPIO_PeriClockControl+0xa6>
		else if(pGPIOx == GPIOD)
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	4a16      	ldr	r2, [pc, #88]	; (80002bc <GPIO_PeriClockControl+0xbc>)
 8000264:	4293      	cmp	r3, r2
 8000266:	d107      	bne.n	8000278 <GPIO_PeriClockControl+0x78>
			GPIOD_PCLOCK_ENABLE();
 8000268:	4b11      	ldr	r3, [pc, #68]	; (80002b0 <GPIO_PeriClockControl+0xb0>)
 800026a:	695a      	ldr	r2, [r3, #20]
 800026c:	4b10      	ldr	r3, [pc, #64]	; (80002b0 <GPIO_PeriClockControl+0xb0>)
 800026e:	2180      	movs	r1, #128	; 0x80
 8000270:	0349      	lsls	r1, r1, #13
 8000272:	430a      	orrs	r2, r1
 8000274:	615a      	str	r2, [r3, #20]
}
 8000276:	e016      	b.n	80002a6 <GPIO_PeriClockControl+0xa6>
		else if(pGPIOx == GPIOE)
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	4a11      	ldr	r2, [pc, #68]	; (80002c0 <GPIO_PeriClockControl+0xc0>)
 800027c:	4293      	cmp	r3, r2
 800027e:	d107      	bne.n	8000290 <GPIO_PeriClockControl+0x90>
			GPIOE_PCLOCK_ENABLE();
 8000280:	4b0b      	ldr	r3, [pc, #44]	; (80002b0 <GPIO_PeriClockControl+0xb0>)
 8000282:	695a      	ldr	r2, [r3, #20]
 8000284:	4b0a      	ldr	r3, [pc, #40]	; (80002b0 <GPIO_PeriClockControl+0xb0>)
 8000286:	2180      	movs	r1, #128	; 0x80
 8000288:	0389      	lsls	r1, r1, #14
 800028a:	430a      	orrs	r2, r1
 800028c:	615a      	str	r2, [r3, #20]
}
 800028e:	e00a      	b.n	80002a6 <GPIO_PeriClockControl+0xa6>
		else if(pGPIOx == GPIOF)
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	4a0c      	ldr	r2, [pc, #48]	; (80002c4 <GPIO_PeriClockControl+0xc4>)
 8000294:	4293      	cmp	r3, r2
 8000296:	d106      	bne.n	80002a6 <GPIO_PeriClockControl+0xa6>
			GPIOF_PCLOCK_ENABLE();
 8000298:	4b05      	ldr	r3, [pc, #20]	; (80002b0 <GPIO_PeriClockControl+0xb0>)
 800029a:	695a      	ldr	r2, [r3, #20]
 800029c:	4b04      	ldr	r3, [pc, #16]	; (80002b0 <GPIO_PeriClockControl+0xb0>)
 800029e:	2180      	movs	r1, #128	; 0x80
 80002a0:	03c9      	lsls	r1, r1, #15
 80002a2:	430a      	orrs	r2, r1
 80002a4:	615a      	str	r2, [r3, #20]
}
 80002a6:	46c0      	nop			; (mov r8, r8)
 80002a8:	46bd      	mov	sp, r7
 80002aa:	b002      	add	sp, #8
 80002ac:	bd80      	pop	{r7, pc}
 80002ae:	46c0      	nop			; (mov r8, r8)
 80002b0:	40021000 	.word	0x40021000
 80002b4:	48000400 	.word	0x48000400
 80002b8:	48000800 	.word	0x48000800
 80002bc:	48000c00 	.word	0x48000c00
 80002c0:	48001000 	.word	0x48001000
 80002c4:	48001400 	.word	0x48001400

080002c8 <GPIO_Init>:

/*
 * Init and De-Init
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 80002c8:	b5b0      	push	{r4, r5, r7, lr}
 80002ca:	b086      	sub	sp, #24
 80002cc:	af00      	add	r7, sp, #0
 80002ce:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0;
 80002d0:	2300      	movs	r3, #0
 80002d2:	617b      	str	r3, [r7, #20]
	// 1. configure the mode of gpio pin
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	795b      	ldrb	r3, [r3, #5]
 80002d8:	2b03      	cmp	r3, #3
 80002da:	d81f      	bhi.n	800031c <GPIO_Init+0x54>
	{
		// non-interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	795b      	ldrb	r3, [r3, #5]
 80002e0:	001a      	movs	r2, r3
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	791b      	ldrb	r3, [r3, #4]
 80002e6:	005b      	lsls	r3, r3, #1
 80002e8:	409a      	lsls	r2, r3
 80002ea:	0013      	movs	r3, r2
 80002ec:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	681a      	ldr	r2, [r3, #0]
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	791b      	ldrb	r3, [r3, #4]
 80002f8:	0019      	movs	r1, r3
 80002fa:	2303      	movs	r3, #3
 80002fc:	408b      	lsls	r3, r1
 80002fe:	43db      	mvns	r3, r3
 8000300:	0019      	movs	r1, r3
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	681b      	ldr	r3, [r3, #0]
 8000306:	400a      	ands	r2, r1
 8000308:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	6819      	ldr	r1, [r3, #0]
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	697a      	ldr	r2, [r7, #20]
 8000316:	430a      	orrs	r2, r1
 8000318:	601a      	str	r2, [r3, #0]
 800031a:	e0a9      	b.n	8000470 <GPIO_Init+0x1a8>
	}
	else
	{
		if(GPIO_MODE_IT_FT == pGPIOHandle->GPIO_PinConfig.GPIO_PinMode)
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	795b      	ldrb	r3, [r3, #5]
 8000320:	2b04      	cmp	r3, #4
 8000322:	d117      	bne.n	8000354 <GPIO_Init+0x8c>
		{
			/* 1. Configure the FTSR */
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000324:	4ba6      	ldr	r3, [pc, #664]	; (80005c0 <GPIO_Init+0x2f8>)
 8000326:	68da      	ldr	r2, [r3, #12]
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	791b      	ldrb	r3, [r3, #4]
 800032c:	0019      	movs	r1, r3
 800032e:	2301      	movs	r3, #1
 8000330:	408b      	lsls	r3, r1
 8000332:	0019      	movs	r1, r3
 8000334:	4ba2      	ldr	r3, [pc, #648]	; (80005c0 <GPIO_Init+0x2f8>)
 8000336:	430a      	orrs	r2, r1
 8000338:	60da      	str	r2, [r3, #12]
			/* Clear the corresponding RTSR bit */
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800033a:	4ba1      	ldr	r3, [pc, #644]	; (80005c0 <GPIO_Init+0x2f8>)
 800033c:	689a      	ldr	r2, [r3, #8]
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	791b      	ldrb	r3, [r3, #4]
 8000342:	0019      	movs	r1, r3
 8000344:	2301      	movs	r3, #1
 8000346:	408b      	lsls	r3, r1
 8000348:	43db      	mvns	r3, r3
 800034a:	0019      	movs	r1, r3
 800034c:	4b9c      	ldr	r3, [pc, #624]	; (80005c0 <GPIO_Init+0x2f8>)
 800034e:	400a      	ands	r2, r1
 8000350:	609a      	str	r2, [r3, #8]
 8000352:	e035      	b.n	80003c0 <GPIO_Init+0xf8>
		}
		else if(GPIO_MODE_IT_RT == pGPIOHandle->GPIO_PinConfig.GPIO_PinMode)
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	795b      	ldrb	r3, [r3, #5]
 8000358:	2b05      	cmp	r3, #5
 800035a:	d117      	bne.n	800038c <GPIO_Init+0xc4>
		{
			/* 1. Configure the RTSR */
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800035c:	4b98      	ldr	r3, [pc, #608]	; (80005c0 <GPIO_Init+0x2f8>)
 800035e:	689a      	ldr	r2, [r3, #8]
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	791b      	ldrb	r3, [r3, #4]
 8000364:	0019      	movs	r1, r3
 8000366:	2301      	movs	r3, #1
 8000368:	408b      	lsls	r3, r1
 800036a:	0019      	movs	r1, r3
 800036c:	4b94      	ldr	r3, [pc, #592]	; (80005c0 <GPIO_Init+0x2f8>)
 800036e:	430a      	orrs	r2, r1
 8000370:	609a      	str	r2, [r3, #8]
			/* Clear the corresponding RTSR bit */
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000372:	4b93      	ldr	r3, [pc, #588]	; (80005c0 <GPIO_Init+0x2f8>)
 8000374:	68da      	ldr	r2, [r3, #12]
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	791b      	ldrb	r3, [r3, #4]
 800037a:	0019      	movs	r1, r3
 800037c:	2301      	movs	r3, #1
 800037e:	408b      	lsls	r3, r1
 8000380:	43db      	mvns	r3, r3
 8000382:	0019      	movs	r1, r3
 8000384:	4b8e      	ldr	r3, [pc, #568]	; (80005c0 <GPIO_Init+0x2f8>)
 8000386:	400a      	ands	r2, r1
 8000388:	60da      	str	r2, [r3, #12]
 800038a:	e019      	b.n	80003c0 <GPIO_Init+0xf8>
		}
		else if(GPIO_MODE_IT_RFT == pGPIOHandle->GPIO_PinConfig.GPIO_PinMode)
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	795b      	ldrb	r3, [r3, #5]
 8000390:	2b06      	cmp	r3, #6
 8000392:	d115      	bne.n	80003c0 <GPIO_Init+0xf8>
		{
			/* 1. Configure the FTSR and RTSR */
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000394:	4b8a      	ldr	r3, [pc, #552]	; (80005c0 <GPIO_Init+0x2f8>)
 8000396:	68da      	ldr	r2, [r3, #12]
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	791b      	ldrb	r3, [r3, #4]
 800039c:	0019      	movs	r1, r3
 800039e:	2301      	movs	r3, #1
 80003a0:	408b      	lsls	r3, r1
 80003a2:	0019      	movs	r1, r3
 80003a4:	4b86      	ldr	r3, [pc, #536]	; (80005c0 <GPIO_Init+0x2f8>)
 80003a6:	430a      	orrs	r2, r1
 80003a8:	60da      	str	r2, [r3, #12]
			/* Clear the corresponding RTSR bit */
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80003aa:	4b85      	ldr	r3, [pc, #532]	; (80005c0 <GPIO_Init+0x2f8>)
 80003ac:	689a      	ldr	r2, [r3, #8]
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	791b      	ldrb	r3, [r3, #4]
 80003b2:	0019      	movs	r1, r3
 80003b4:	2301      	movs	r3, #1
 80003b6:	408b      	lsls	r3, r1
 80003b8:	0019      	movs	r1, r3
 80003ba:	4b81      	ldr	r3, [pc, #516]	; (80005c0 <GPIO_Init+0x2f8>)
 80003bc:	430a      	orrs	r2, r1
 80003be:	609a      	str	r2, [r3, #8]
		}

		/* 2. Configure the GPIO port selection in SYSCFG_EXTICR */
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	791a      	ldrb	r2, [r3, #4]
 80003c4:	2313      	movs	r3, #19
 80003c6:	18fb      	adds	r3, r7, r3
 80003c8:	0892      	lsrs	r2, r2, #2
 80003ca:	701a      	strb	r2, [r3, #0]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	791a      	ldrb	r2, [r3, #4]
 80003d0:	2312      	movs	r3, #18
 80003d2:	18fb      	adds	r3, r7, r3
 80003d4:	2103      	movs	r1, #3
 80003d6:	400a      	ands	r2, r1
 80003d8:	701a      	strb	r2, [r3, #0]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	681a      	ldr	r2, [r3, #0]
 80003de:	2390      	movs	r3, #144	; 0x90
 80003e0:	05db      	lsls	r3, r3, #23
 80003e2:	429a      	cmp	r2, r3
 80003e4:	d024      	beq.n	8000430 <GPIO_Init+0x168>
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	4a76      	ldr	r2, [pc, #472]	; (80005c4 <GPIO_Init+0x2fc>)
 80003ec:	4293      	cmp	r3, r2
 80003ee:	d01d      	beq.n	800042c <GPIO_Init+0x164>
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	4a74      	ldr	r2, [pc, #464]	; (80005c8 <GPIO_Init+0x300>)
 80003f6:	4293      	cmp	r3, r2
 80003f8:	d016      	beq.n	8000428 <GPIO_Init+0x160>
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	4a73      	ldr	r2, [pc, #460]	; (80005cc <GPIO_Init+0x304>)
 8000400:	4293      	cmp	r3, r2
 8000402:	d00f      	beq.n	8000424 <GPIO_Init+0x15c>
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	4a71      	ldr	r2, [pc, #452]	; (80005d0 <GPIO_Init+0x308>)
 800040a:	4293      	cmp	r3, r2
 800040c:	d008      	beq.n	8000420 <GPIO_Init+0x158>
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	4a70      	ldr	r2, [pc, #448]	; (80005d4 <GPIO_Init+0x30c>)
 8000414:	4293      	cmp	r3, r2
 8000416:	d101      	bne.n	800041c <GPIO_Init+0x154>
 8000418:	2305      	movs	r3, #5
 800041a:	e00a      	b.n	8000432 <GPIO_Init+0x16a>
 800041c:	2300      	movs	r3, #0
 800041e:	e008      	b.n	8000432 <GPIO_Init+0x16a>
 8000420:	2304      	movs	r3, #4
 8000422:	e006      	b.n	8000432 <GPIO_Init+0x16a>
 8000424:	2303      	movs	r3, #3
 8000426:	e004      	b.n	8000432 <GPIO_Init+0x16a>
 8000428:	2302      	movs	r3, #2
 800042a:	e002      	b.n	8000432 <GPIO_Init+0x16a>
 800042c:	2301      	movs	r3, #1
 800042e:	e000      	b.n	8000432 <GPIO_Init+0x16a>
 8000430:	2300      	movs	r3, #0
 8000432:	2111      	movs	r1, #17
 8000434:	187a      	adds	r2, r7, r1
 8000436:	7013      	strb	r3, [r2, #0]
		SYSCFG_PCLK_EN();
 8000438:	4b67      	ldr	r3, [pc, #412]	; (80005d8 <GPIO_Init+0x310>)
 800043a:	699b      	ldr	r3, [r3, #24]
		SYSCFG->EXTICR[temp1] = portcode << (temp2 * 4);
 800043c:	187b      	adds	r3, r7, r1
 800043e:	781a      	ldrb	r2, [r3, #0]
 8000440:	2312      	movs	r3, #18
 8000442:	18fb      	adds	r3, r7, r3
 8000444:	781b      	ldrb	r3, [r3, #0]
 8000446:	009b      	lsls	r3, r3, #2
 8000448:	409a      	lsls	r2, r3
 800044a:	0011      	movs	r1, r2
 800044c:	4a63      	ldr	r2, [pc, #396]	; (80005dc <GPIO_Init+0x314>)
 800044e:	2313      	movs	r3, #19
 8000450:	18fb      	adds	r3, r7, r3
 8000452:	781b      	ldrb	r3, [r3, #0]
 8000454:	3302      	adds	r3, #2
 8000456:	009b      	lsls	r3, r3, #2
 8000458:	5099      	str	r1, [r3, r2]

		/* 3. Enable the EXTI interrupt delivery using IMR */
		EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 800045a:	4b59      	ldr	r3, [pc, #356]	; (80005c0 <GPIO_Init+0x2f8>)
 800045c:	681a      	ldr	r2, [r3, #0]
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	791b      	ldrb	r3, [r3, #4]
 8000462:	0019      	movs	r1, r3
 8000464:	2301      	movs	r3, #1
 8000466:	408b      	lsls	r3, r1
 8000468:	0019      	movs	r1, r3
 800046a:	4b55      	ldr	r3, [pc, #340]	; (80005c0 <GPIO_Init+0x2f8>)
 800046c:	430a      	orrs	r2, r1
 800046e:	601a      	str	r2, [r3, #0]
	}


	temp = 0;
 8000470:	2300      	movs	r3, #0
 8000472:	617b      	str	r3, [r7, #20]

	// 2. configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	799b      	ldrb	r3, [r3, #6]
 8000478:	001a      	movs	r2, r3
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	791b      	ldrb	r3, [r3, #4]
 800047e:	005b      	lsls	r3, r3, #1
 8000480:	409a      	lsls	r2, r3
 8000482:	0013      	movs	r3, r2
 8000484:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	689a      	ldr	r2, [r3, #8]
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	791b      	ldrb	r3, [r3, #4]
 8000490:	0019      	movs	r1, r3
 8000492:	2303      	movs	r3, #3
 8000494:	408b      	lsls	r3, r1
 8000496:	43db      	mvns	r3, r3
 8000498:	0019      	movs	r1, r3
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	400a      	ands	r2, r1
 80004a0:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	6899      	ldr	r1, [r3, #8]
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	697a      	ldr	r2, [r7, #20]
 80004ae:	430a      	orrs	r2, r1
 80004b0:	609a      	str	r2, [r3, #8]

	temp = 0;
 80004b2:	2300      	movs	r3, #0
 80004b4:	617b      	str	r3, [r7, #20]

	// 3. configure the pupd settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	79db      	ldrb	r3, [r3, #7]
 80004ba:	001a      	movs	r2, r3
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	791b      	ldrb	r3, [r3, #4]
 80004c0:	005b      	lsls	r3, r3, #1
 80004c2:	409a      	lsls	r2, r3
 80004c4:	0013      	movs	r3, r2
 80004c6:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	68da      	ldr	r2, [r3, #12]
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	791b      	ldrb	r3, [r3, #4]
 80004d2:	0019      	movs	r1, r3
 80004d4:	2303      	movs	r3, #3
 80004d6:	408b      	lsls	r3, r1
 80004d8:	43db      	mvns	r3, r3
 80004da:	0019      	movs	r1, r3
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	400a      	ands	r2, r1
 80004e2:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	68d9      	ldr	r1, [r3, #12]
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	697a      	ldr	r2, [r7, #20]
 80004f0:	430a      	orrs	r2, r1
 80004f2:	60da      	str	r2, [r3, #12]

	temp = 0;
 80004f4:	2300      	movs	r3, #0
 80004f6:	617b      	str	r3, [r7, #20]

	// 4.configure the optype
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType));
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	7a1b      	ldrb	r3, [r3, #8]
 80004fc:	001a      	movs	r2, r3
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	7a1b      	ldrb	r3, [r3, #8]
 8000502:	005b      	lsls	r3, r3, #1
 8000504:	409a      	lsls	r2, r3
 8000506:	0013      	movs	r3, r2
 8000508:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	685a      	ldr	r2, [r3, #4]
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	791b      	ldrb	r3, [r3, #4]
 8000514:	0019      	movs	r1, r3
 8000516:	2303      	movs	r3, #3
 8000518:	408b      	lsls	r3, r1
 800051a:	43db      	mvns	r3, r3
 800051c:	0019      	movs	r1, r3
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	400a      	ands	r2, r1
 8000524:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	6859      	ldr	r1, [r3, #4]
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	697a      	ldr	r2, [r7, #20]
 8000532:	430a      	orrs	r2, r1
 8000534:	605a      	str	r2, [r3, #4]

	// 5. configure the alt functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	795b      	ldrb	r3, [r3, #5]
 800053a:	2b02      	cmp	r3, #2
 800053c:	d13b      	bne.n	80005b6 <GPIO_Init+0x2ee>
	{
		// configure the alt function registers.
		uint8_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	791a      	ldrb	r2, [r3, #4]
 8000542:	2410      	movs	r4, #16
 8000544:	193b      	adds	r3, r7, r4
 8000546:	08d2      	lsrs	r2, r2, #3
 8000548:	701a      	strb	r2, [r3, #0]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	791a      	ldrb	r2, [r3, #4]
 800054e:	250f      	movs	r5, #15
 8000550:	197b      	adds	r3, r7, r5
 8000552:	2107      	movs	r1, #7
 8000554:	400a      	ands	r2, r1
 8000556:	701a      	strb	r2, [r3, #0]

		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4 * temp2));
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	193a      	adds	r2, r7, r4
 800055e:	7812      	ldrb	r2, [r2, #0]
 8000560:	3208      	adds	r2, #8
 8000562:	0092      	lsls	r2, r2, #2
 8000564:	58d1      	ldr	r1, [r2, r3]
 8000566:	197b      	adds	r3, r7, r5
 8000568:	781b      	ldrb	r3, [r3, #0]
 800056a:	009b      	lsls	r3, r3, #2
 800056c:	220f      	movs	r2, #15
 800056e:	409a      	lsls	r2, r3
 8000570:	0013      	movs	r3, r2
 8000572:	43db      	mvns	r3, r3
 8000574:	0018      	movs	r0, r3
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	193a      	adds	r2, r7, r4
 800057c:	7812      	ldrb	r2, [r2, #0]
 800057e:	4001      	ands	r1, r0
 8000580:	3208      	adds	r2, #8
 8000582:	0092      	lsls	r2, r2, #2
 8000584:	50d1      	str	r1, [r2, r3]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2));
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	193a      	adds	r2, r7, r4
 800058c:	7812      	ldrb	r2, [r2, #0]
 800058e:	3208      	adds	r2, #8
 8000590:	0092      	lsls	r2, r2, #2
 8000592:	58d1      	ldr	r1, [r2, r3]
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	7a5b      	ldrb	r3, [r3, #9]
 8000598:	001a      	movs	r2, r3
 800059a:	197b      	adds	r3, r7, r5
 800059c:	781b      	ldrb	r3, [r3, #0]
 800059e:	009b      	lsls	r3, r3, #2
 80005a0:	409a      	lsls	r2, r3
 80005a2:	0013      	movs	r3, r2
 80005a4:	0018      	movs	r0, r3
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	193a      	adds	r2, r7, r4
 80005ac:	7812      	ldrb	r2, [r2, #0]
 80005ae:	4301      	orrs	r1, r0
 80005b0:	3208      	adds	r2, #8
 80005b2:	0092      	lsls	r2, r2, #2
 80005b4:	50d1      	str	r1, [r2, r3]
	}
}
 80005b6:	46c0      	nop			; (mov r8, r8)
 80005b8:	46bd      	mov	sp, r7
 80005ba:	b006      	add	sp, #24
 80005bc:	bdb0      	pop	{r4, r5, r7, pc}
 80005be:	46c0      	nop			; (mov r8, r8)
 80005c0:	40010400 	.word	0x40010400
 80005c4:	48000400 	.word	0x48000400
 80005c8:	48000800 	.word	0x48000800
 80005cc:	48000c00 	.word	0x48000c00
 80005d0:	48001000 	.word	0x48001000
 80005d4:	48001400 	.word	0x48001400
 80005d8:	40021000 	.word	0x40021000
 80005dc:	40010000 	.word	0x40010000

080005e0 <GPIO_ToggleOutputPin>:
void GPIO_WriteToOutputPort(GPIO_RegDef_t *pGPIOx, uint16_t Value)
{
	pGPIOx->ODR = Value;
}
void GPIO_ToggleOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
 80005e8:	000a      	movs	r2, r1
 80005ea:	1cfb      	adds	r3, r7, #3
 80005ec:	701a      	strb	r2, [r3, #0]
	pGPIOx->ODR ^= (1 << PinNumber);
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	695b      	ldr	r3, [r3, #20]
 80005f2:	1cfa      	adds	r2, r7, #3
 80005f4:	7812      	ldrb	r2, [r2, #0]
 80005f6:	2101      	movs	r1, #1
 80005f8:	4091      	lsls	r1, r2
 80005fa:	000a      	movs	r2, r1
 80005fc:	405a      	eors	r2, r3
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	615a      	str	r2, [r3, #20]
}
 8000602:	46c0      	nop			; (mov r8, r8)
 8000604:	46bd      	mov	sp, r7
 8000606:	b002      	add	sp, #8
 8000608:	bd80      	pop	{r7, pc}
	...

0800060c <GPIO_IRQInterruptConfig>:

/*
 * IRQ Configuration and ISR handling
 */
void GPIO_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDi)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0
 8000612:	0002      	movs	r2, r0
 8000614:	1dfb      	adds	r3, r7, #7
 8000616:	701a      	strb	r2, [r3, #0]
 8000618:	1dbb      	adds	r3, r7, #6
 800061a:	1c0a      	adds	r2, r1, #0
 800061c:	701a      	strb	r2, [r3, #0]
	if(ENABLE == EnorDi)
 800061e:	1dbb      	adds	r3, r7, #6
 8000620:	781b      	ldrb	r3, [r3, #0]
 8000622:	2b01      	cmp	r3, #1
 8000624:	d10f      	bne.n	8000646 <GPIO_IRQInterruptConfig+0x3a>
	{
		if(IRQNumber <= 31)
 8000626:	1dfb      	adds	r3, r7, #7
 8000628:	781b      	ldrb	r3, [r3, #0]
 800062a:	2b1f      	cmp	r3, #31
 800062c:	d81a      	bhi.n	8000664 <GPIO_IRQInterruptConfig+0x58>
		{
			/* program ISER register */
			*NVIC_ISER |= (1 << IRQNumber);
 800062e:	4b0f      	ldr	r3, [pc, #60]	; (800066c <GPIO_IRQInterruptConfig+0x60>)
 8000630:	681a      	ldr	r2, [r3, #0]
 8000632:	1dfb      	adds	r3, r7, #7
 8000634:	781b      	ldrb	r3, [r3, #0]
 8000636:	2101      	movs	r1, #1
 8000638:	4099      	lsls	r1, r3
 800063a:	000b      	movs	r3, r1
 800063c:	0019      	movs	r1, r3
 800063e:	4b0b      	ldr	r3, [pc, #44]	; (800066c <GPIO_IRQInterruptConfig+0x60>)
 8000640:	430a      	orrs	r2, r1
 8000642:	601a      	str	r2, [r3, #0]
		{
			/* program ICER register */
			*NVIC_ICER |= (1 << IRQNumber);
		}
	}
}
 8000644:	e00e      	b.n	8000664 <GPIO_IRQInterruptConfig+0x58>
		if(IRQNumber <= 31)
 8000646:	1dfb      	adds	r3, r7, #7
 8000648:	781b      	ldrb	r3, [r3, #0]
 800064a:	2b1f      	cmp	r3, #31
 800064c:	d80a      	bhi.n	8000664 <GPIO_IRQInterruptConfig+0x58>
			*NVIC_ICER |= (1 << IRQNumber);
 800064e:	4b08      	ldr	r3, [pc, #32]	; (8000670 <GPIO_IRQInterruptConfig+0x64>)
 8000650:	681a      	ldr	r2, [r3, #0]
 8000652:	1dfb      	adds	r3, r7, #7
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	2101      	movs	r1, #1
 8000658:	4099      	lsls	r1, r3
 800065a:	000b      	movs	r3, r1
 800065c:	0019      	movs	r1, r3
 800065e:	4b04      	ldr	r3, [pc, #16]	; (8000670 <GPIO_IRQInterruptConfig+0x64>)
 8000660:	430a      	orrs	r2, r1
 8000662:	601a      	str	r2, [r3, #0]
}
 8000664:	46c0      	nop			; (mov r8, r8)
 8000666:	46bd      	mov	sp, r7
 8000668:	b002      	add	sp, #8
 800066a:	bd80      	pop	{r7, pc}
 800066c:	e000e100 	.word	0xe000e100
 8000670:	e000e180 	.word	0xe000e180

08000674 <GPIO_IRQPriorityConfig>:

void GPIO_IRQPriorityConfig(uint8_t IRQNumber, uint8_t IRQPriority)
{
 8000674:	b590      	push	{r4, r7, lr}
 8000676:	b085      	sub	sp, #20
 8000678:	af00      	add	r7, sp, #0
 800067a:	0002      	movs	r2, r0
 800067c:	1dfb      	adds	r3, r7, #7
 800067e:	701a      	strb	r2, [r3, #0]
 8000680:	1dbb      	adds	r3, r7, #6
 8000682:	1c0a      	adds	r2, r1, #0
 8000684:	701a      	strb	r2, [r3, #0]
	/* 1. First lets find out the ipr register */
	uint8_t iprx = IRQNumber / 4;
 8000686:	200f      	movs	r0, #15
 8000688:	183b      	adds	r3, r7, r0
 800068a:	1dfa      	adds	r2, r7, #7
 800068c:	7812      	ldrb	r2, [r2, #0]
 800068e:	0892      	lsrs	r2, r2, #2
 8000690:	701a      	strb	r2, [r3, #0]
	uint8_t iprx_section = IRQNumber % 4;
 8000692:	240e      	movs	r4, #14
 8000694:	193b      	adds	r3, r7, r4
 8000696:	1dfa      	adds	r2, r7, #7
 8000698:	7812      	ldrb	r2, [r2, #0]
 800069a:	2103      	movs	r1, #3
 800069c:	400a      	ands	r2, r1
 800069e:	701a      	strb	r2, [r3, #0]

	uint8_t shift_amount = ( 8 * iprx_section ) + (8 - NO_PR_BITS_IMPLEMENTED);
 80006a0:	193b      	adds	r3, r7, r4
 80006a2:	781b      	ldrb	r3, [r3, #0]
 80006a4:	00db      	lsls	r3, r3, #3
 80006a6:	b2da      	uxtb	r2, r3
 80006a8:	240d      	movs	r4, #13
 80006aa:	193b      	adds	r3, r7, r4
 80006ac:	3204      	adds	r2, #4
 80006ae:	701a      	strb	r2, [r3, #0]
	*(NVIC_PR_BASE_ADDR + iprx * 4) |= ( IRQPriority << shift_amount );
 80006b0:	183b      	adds	r3, r7, r0
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	011b      	lsls	r3, r3, #4
 80006b6:	4a0b      	ldr	r2, [pc, #44]	; (80006e4 <GPIO_IRQPriorityConfig+0x70>)
 80006b8:	4694      	mov	ip, r2
 80006ba:	4463      	add	r3, ip
 80006bc:	681a      	ldr	r2, [r3, #0]
 80006be:	1dbb      	adds	r3, r7, #6
 80006c0:	7819      	ldrb	r1, [r3, #0]
 80006c2:	193b      	adds	r3, r7, r4
 80006c4:	781b      	ldrb	r3, [r3, #0]
 80006c6:	4099      	lsls	r1, r3
 80006c8:	000b      	movs	r3, r1
 80006ca:	0019      	movs	r1, r3
 80006cc:	183b      	adds	r3, r7, r0
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	011b      	lsls	r3, r3, #4
 80006d2:	4804      	ldr	r0, [pc, #16]	; (80006e4 <GPIO_IRQPriorityConfig+0x70>)
 80006d4:	4684      	mov	ip, r0
 80006d6:	4463      	add	r3, ip
 80006d8:	430a      	orrs	r2, r1
 80006da:	601a      	str	r2, [r3, #0]
}
 80006dc:	46c0      	nop			; (mov r8, r8)
 80006de:	46bd      	mov	sp, r7
 80006e0:	b005      	add	sp, #20
 80006e2:	bd90      	pop	{r4, r7, pc}
 80006e4:	e000e400 	.word	0xe000e400

080006e8 <GPIO_IRQHandling>:

void GPIO_IRQHandling(uint8_t PinNumber)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	0002      	movs	r2, r0
 80006f0:	1dfb      	adds	r3, r7, #7
 80006f2:	701a      	strb	r2, [r3, #0]
	/* Clear the exti pr register corresponding to the pin number */
	if(EXTI->PR & (1 << PinNumber))
 80006f4:	4b0b      	ldr	r3, [pc, #44]	; (8000724 <GPIO_IRQHandling+0x3c>)
 80006f6:	695b      	ldr	r3, [r3, #20]
 80006f8:	1dfa      	adds	r2, r7, #7
 80006fa:	7812      	ldrb	r2, [r2, #0]
 80006fc:	2101      	movs	r1, #1
 80006fe:	4091      	lsls	r1, r2
 8000700:	000a      	movs	r2, r1
 8000702:	4013      	ands	r3, r2
 8000704:	d00a      	beq.n	800071c <GPIO_IRQHandling+0x34>
	{
		/* Clear */
		EXTI->PR |= (1 << PinNumber);
 8000706:	4b07      	ldr	r3, [pc, #28]	; (8000724 <GPIO_IRQHandling+0x3c>)
 8000708:	695a      	ldr	r2, [r3, #20]
 800070a:	1dfb      	adds	r3, r7, #7
 800070c:	781b      	ldrb	r3, [r3, #0]
 800070e:	2101      	movs	r1, #1
 8000710:	4099      	lsls	r1, r3
 8000712:	000b      	movs	r3, r1
 8000714:	0019      	movs	r1, r3
 8000716:	4b03      	ldr	r3, [pc, #12]	; (8000724 <GPIO_IRQHandling+0x3c>)
 8000718:	430a      	orrs	r2, r1
 800071a:	615a      	str	r2, [r3, #20]
	}
}
 800071c:	46c0      	nop			; (mov r8, r8)
 800071e:	46bd      	mov	sp, r7
 8000720:	b002      	add	sp, #8
 8000722:	bd80      	pop	{r7, pc}
 8000724:	40010400 	.word	0x40010400

08000728 <__libc_init_array>:
 8000728:	b570      	push	{r4, r5, r6, lr}
 800072a:	2600      	movs	r6, #0
 800072c:	4d0c      	ldr	r5, [pc, #48]	; (8000760 <__libc_init_array+0x38>)
 800072e:	4c0d      	ldr	r4, [pc, #52]	; (8000764 <__libc_init_array+0x3c>)
 8000730:	1b64      	subs	r4, r4, r5
 8000732:	10a4      	asrs	r4, r4, #2
 8000734:	42a6      	cmp	r6, r4
 8000736:	d109      	bne.n	800074c <__libc_init_array+0x24>
 8000738:	2600      	movs	r6, #0
 800073a:	f000 f819 	bl	8000770 <_init>
 800073e:	4d0a      	ldr	r5, [pc, #40]	; (8000768 <__libc_init_array+0x40>)
 8000740:	4c0a      	ldr	r4, [pc, #40]	; (800076c <__libc_init_array+0x44>)
 8000742:	1b64      	subs	r4, r4, r5
 8000744:	10a4      	asrs	r4, r4, #2
 8000746:	42a6      	cmp	r6, r4
 8000748:	d105      	bne.n	8000756 <__libc_init_array+0x2e>
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	00b3      	lsls	r3, r6, #2
 800074e:	58eb      	ldr	r3, [r5, r3]
 8000750:	4798      	blx	r3
 8000752:	3601      	adds	r6, #1
 8000754:	e7ee      	b.n	8000734 <__libc_init_array+0xc>
 8000756:	00b3      	lsls	r3, r6, #2
 8000758:	58eb      	ldr	r3, [r5, r3]
 800075a:	4798      	blx	r3
 800075c:	3601      	adds	r6, #1
 800075e:	e7f2      	b.n	8000746 <__libc_init_array+0x1e>
 8000760:	08000788 	.word	0x08000788
 8000764:	08000788 	.word	0x08000788
 8000768:	08000788 	.word	0x08000788
 800076c:	0800078c 	.word	0x0800078c

08000770 <_init>:
 8000770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000772:	46c0      	nop			; (mov r8, r8)
 8000774:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000776:	bc08      	pop	{r3}
 8000778:	469e      	mov	lr, r3
 800077a:	4770      	bx	lr

0800077c <_fini>:
 800077c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800077e:	46c0      	nop			; (mov r8, r8)
 8000780:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000782:	bc08      	pop	{r3}
 8000784:	469e      	mov	lr, r3
 8000786:	4770      	bx	lr
