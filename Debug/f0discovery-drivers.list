
f0discovery-drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000158  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000218  08000220  00010220  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000218  08000218  00010220  2**0
                  CONTENTS
  4 .ARM          00000000  08000218  08000218  00010220  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000218  08000220  00010220  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000218  08000218  00010218  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800021c  0800021c  0001021c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010220  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000220  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000220  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00010220  2**0
                  CONTENTS, READONLY
 12 .debug_info   000006c5  00000000  00000000  00010248  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000178  00000000  00000000  0001090d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000000c0  00000000  00000000  00010a88  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000098  00000000  00000000  00010b48  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000011d8  00000000  00000000  00010be0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00000a35  00000000  00000000  00011db8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000048cb  00000000  00000000  000127ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000170b8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000001e8  00000000  00000000  00017134  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000000 	.word	0x20000000
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08000200 	.word	0x08000200

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000004 	.word	0x20000004
 8000104:	08000200 	.word	0x08000200

08000108 <main>:

#include "stm32f0discovery.h"


int main(void)
{
 8000108:	b580      	push	{r7, lr}
 800010a:	af00      	add	r7, sp, #0
	return 0;
 800010c:	2300      	movs	r3, #0
}
 800010e:	0018      	movs	r0, r3
 8000110:	46bd      	mov	sp, r7
 8000112:	bd80      	pop	{r7, pc}

08000114 <EXTI0_1_IRQHandler>:


void EXTI0_1_IRQHandler(void)
{
 8000114:	b580      	push	{r7, lr}
 8000116:	af00      	add	r7, sp, #0
	/* handle the interrupt */
	GPIO_IRQHandling(0);
 8000118:	2000      	movs	r0, #0
 800011a:	f000 f82d 	bl	8000178 <GPIO_IRQHandling>
}
 800011e:	46c0      	nop			; (mov r8, r8)
 8000120:	46bd      	mov	sp, r7
 8000122:	bd80      	pop	{r7, pc}

08000124 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000124:	480d      	ldr	r0, [pc, #52]	; (800015c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000126:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000128:	e000      	b.n	800012c <Reset_Handler+0x8>
 800012a:	bf00      	nop

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800012c:	480c      	ldr	r0, [pc, #48]	; (8000160 <LoopForever+0x6>)
  ldr r1, =_edata
 800012e:	490d      	ldr	r1, [pc, #52]	; (8000164 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000130:	4a0d      	ldr	r2, [pc, #52]	; (8000168 <LoopForever+0xe>)
  movs r3, #0
 8000132:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000134:	e002      	b.n	800013c <LoopCopyDataInit>

08000136 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000136:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000138:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800013a:	3304      	adds	r3, #4

0800013c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800013c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800013e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000140:	d3f9      	bcc.n	8000136 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000142:	4a0a      	ldr	r2, [pc, #40]	; (800016c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000144:	4c0a      	ldr	r4, [pc, #40]	; (8000170 <LoopForever+0x16>)
  movs r3, #0
 8000146:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000148:	e001      	b.n	800014e <LoopFillZerobss>

0800014a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800014a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800014c:	3204      	adds	r2, #4

0800014e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800014e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000150:	d3fb      	bcc.n	800014a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000152:	f000 f831 	bl	80001b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000156:	f7ff ffd7 	bl	8000108 <main>

0800015a <LoopForever>:

LoopForever:
    b LoopForever
 800015a:	e7fe      	b.n	800015a <LoopForever>
  ldr   r0, =_estack
 800015c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000160:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000164:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000168:	08000220 	.word	0x08000220
  ldr r2, =_sbss
 800016c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000170:	2000001c 	.word	0x2000001c

08000174 <ADC_COMP_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000174:	e7fe      	b.n	8000174 <ADC_COMP_IRQHandler>
	...

08000178 <GPIO_IRQHandling>:
	uint8_t shift_amount = ( 8 * iprx_section ) + (8 - NO_PR_BITS_IMPLEMENTED);
	*(NVIC_PR_BASE_ADDR + iprx * 4) |= ( IRQPriority << shift_amount );
}

void GPIO_IRQHandling(uint8_t PinNumber)
{
 8000178:	b580      	push	{r7, lr}
 800017a:	b082      	sub	sp, #8
 800017c:	af00      	add	r7, sp, #0
 800017e:	0002      	movs	r2, r0
 8000180:	1dfb      	adds	r3, r7, #7
 8000182:	701a      	strb	r2, [r3, #0]
	/* Clear the exti pr register corresponding to the pin number */
	if(EXTI->PR & (1 << PinNumber))
 8000184:	4b0b      	ldr	r3, [pc, #44]	; (80001b4 <GPIO_IRQHandling+0x3c>)
 8000186:	695b      	ldr	r3, [r3, #20]
 8000188:	1dfa      	adds	r2, r7, #7
 800018a:	7812      	ldrb	r2, [r2, #0]
 800018c:	2101      	movs	r1, #1
 800018e:	4091      	lsls	r1, r2
 8000190:	000a      	movs	r2, r1
 8000192:	4013      	ands	r3, r2
 8000194:	d00a      	beq.n	80001ac <GPIO_IRQHandling+0x34>
	{
		/* Clear */
		EXTI->PR |= (1 << PinNumber);
 8000196:	4b07      	ldr	r3, [pc, #28]	; (80001b4 <GPIO_IRQHandling+0x3c>)
 8000198:	695a      	ldr	r2, [r3, #20]
 800019a:	1dfb      	adds	r3, r7, #7
 800019c:	781b      	ldrb	r3, [r3, #0]
 800019e:	2101      	movs	r1, #1
 80001a0:	4099      	lsls	r1, r3
 80001a2:	000b      	movs	r3, r1
 80001a4:	0019      	movs	r1, r3
 80001a6:	4b03      	ldr	r3, [pc, #12]	; (80001b4 <GPIO_IRQHandling+0x3c>)
 80001a8:	430a      	orrs	r2, r1
 80001aa:	615a      	str	r2, [r3, #20]
	}
}
 80001ac:	46c0      	nop			; (mov r8, r8)
 80001ae:	46bd      	mov	sp, r7
 80001b0:	b002      	add	sp, #8
 80001b2:	bd80      	pop	{r7, pc}
 80001b4:	40010400 	.word	0x40010400

080001b8 <__libc_init_array>:
 80001b8:	b570      	push	{r4, r5, r6, lr}
 80001ba:	2600      	movs	r6, #0
 80001bc:	4d0c      	ldr	r5, [pc, #48]	; (80001f0 <__libc_init_array+0x38>)
 80001be:	4c0d      	ldr	r4, [pc, #52]	; (80001f4 <__libc_init_array+0x3c>)
 80001c0:	1b64      	subs	r4, r4, r5
 80001c2:	10a4      	asrs	r4, r4, #2
 80001c4:	42a6      	cmp	r6, r4
 80001c6:	d109      	bne.n	80001dc <__libc_init_array+0x24>
 80001c8:	2600      	movs	r6, #0
 80001ca:	f000 f819 	bl	8000200 <_init>
 80001ce:	4d0a      	ldr	r5, [pc, #40]	; (80001f8 <__libc_init_array+0x40>)
 80001d0:	4c0a      	ldr	r4, [pc, #40]	; (80001fc <__libc_init_array+0x44>)
 80001d2:	1b64      	subs	r4, r4, r5
 80001d4:	10a4      	asrs	r4, r4, #2
 80001d6:	42a6      	cmp	r6, r4
 80001d8:	d105      	bne.n	80001e6 <__libc_init_array+0x2e>
 80001da:	bd70      	pop	{r4, r5, r6, pc}
 80001dc:	00b3      	lsls	r3, r6, #2
 80001de:	58eb      	ldr	r3, [r5, r3]
 80001e0:	4798      	blx	r3
 80001e2:	3601      	adds	r6, #1
 80001e4:	e7ee      	b.n	80001c4 <__libc_init_array+0xc>
 80001e6:	00b3      	lsls	r3, r6, #2
 80001e8:	58eb      	ldr	r3, [r5, r3]
 80001ea:	4798      	blx	r3
 80001ec:	3601      	adds	r6, #1
 80001ee:	e7f2      	b.n	80001d6 <__libc_init_array+0x1e>
 80001f0:	08000218 	.word	0x08000218
 80001f4:	08000218 	.word	0x08000218
 80001f8:	08000218 	.word	0x08000218
 80001fc:	0800021c 	.word	0x0800021c

08000200 <_init>:
 8000200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000202:	46c0      	nop			; (mov r8, r8)
 8000204:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000206:	bc08      	pop	{r3}
 8000208:	469e      	mov	lr, r3
 800020a:	4770      	bx	lr

0800020c <_fini>:
 800020c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800020e:	46c0      	nop			; (mov r8, r8)
 8000210:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000212:	bc08      	pop	{r3}
 8000214:	469e      	mov	lr, r3
 8000216:	4770      	bx	lr
